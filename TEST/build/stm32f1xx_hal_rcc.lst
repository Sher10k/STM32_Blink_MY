ARM GAS  /tmp/ccxUz4Br.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f1xx_hal_rcc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.HAL_RCC_DeInit,"ax",%progbits
  19              		.align	2
  20              		.global	HAL_RCC_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	HAL_RCC_DeInit:
  25              	.LFB63:
  26              		.file 1 "Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c"
   1:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
   2:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ******************************************************************************
   3:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @file    stm32f1xx_hal_rcc.c
   4:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @author  MCD Application Team
   5:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief   RCC HAL module driver.
   6:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          This file provides firmware functions to manage the following 
   7:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          functionalities of the Reset and Clock Control (RCC) peripheral:
   8:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           + Peripheral Control functions
  10:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *       
  11:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @verbatim                
  12:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ==============================================================================
  13:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                       ##### RCC specific features #####
  14:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ==============================================================================
  15:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..]  
  16:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       After reset the device is running from Internal High Speed oscillator
  17:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (HSI 8MHz) with Flash 0 wait state, Flash prefetch buffer is enabled, 
  18:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       and all peripherals are off except internal SRAM, Flash and JTAG.
  19:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) buses;
  20:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           all peripherals mapped on these buses are running at HSI speed.
  21:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  22:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  23:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           are assigned to be used for debug purpose.
  24:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..] Once the device started from reset, the user application has to:
  25:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  26:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (if the application needs higher frequency/performance)
  27:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  28:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) Configure the AHB and APB buses prescalers
  29:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  30:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) Configure the clock source(s) for peripherals whose clocks are not
  31:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS) 
  32:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
ARM GAS  /tmp/ccxUz4Br.s 			page 2


  33:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                       ##### RCC Limitations #####
  34:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ==============================================================================
  35:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..]  
  36:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       A delay between an RCC peripheral clock enable and the effective peripheral 
  37:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       enabling should be taken into account in order to manage the peripheral read/write 
  38:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       from/to registers.
  39:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (+) This delay depends on the peripheral mapping.
  40:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         (++) AHB & APB peripherals, 1 dummy read is necessary
  41:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  42:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..]  
  43:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       Workarounds:
  44:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) For AHB & APB peripherals, a dummy read to the peripheral register has been
  45:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           inserted in each __HAL_RCC_PPP_CLK_ENABLE() macro.
  46:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  47:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @endverbatim
  48:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ******************************************************************************
  49:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @attention
  50:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
  51:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  52:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
  53:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * Redistribution and use in source and binary forms, with or without modification,
  54:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * are permitted provided that the following conditions are met:
  55:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  56:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer.
  57:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  58:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *      this list of conditions and the following disclaimer in the documentation
  59:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *      and/or other materials provided with the distribution.
  60:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  61:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *      may be used to endorse or promote products derived from this software
  62:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *      without specific prior written permission.
  63:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
  64:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  65:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  66:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  67:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  68:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  69:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  70:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  71:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  72:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  73:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  74:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
  75:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ******************************************************************************  
  76:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** */
  77:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
  78:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Includes ------------------------------------------------------------------*/
  79:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #include "stm32f1xx_hal.h"
  80:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  81:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @addtogroup STM32F1xx_HAL_Driver
  82:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
  83:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
  84:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  85:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC RCC
  86:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** * @brief RCC HAL module driver
  87:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
  88:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
  89:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
ARM GAS  /tmp/ccxUz4Br.s 			page 3


  90:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #ifdef HAL_RCC_MODULE_ENABLED
  91:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
  92:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  93:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Private define ------------------------------------------------------------*/
  94:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Private_Constants RCC Private Constants
  95:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****  * @{
  96:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****  */
  97:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
  98:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @}
  99:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Private macro -------------------------------------------------------------*/
 101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Private_Macros RCC Private Macros
 102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
 103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #define MCO1_CLK_ENABLE()     __HAL_RCC_GPIOA_CLK_ENABLE()
 106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #define MCO1_GPIO_PORT        GPIOA
 107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #define MCO1_PIN              GPIO_PIN_8
 108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @}
 111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Private variables ---------------------------------------------------------*/
 114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Private_Variables RCC Private Variables
 115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
 116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @}
 119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** static void RCC_Delay(uint32_t mdelay);
 123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /* Exported functions --------------------------------------------------------*/
 125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions RCC Exported Functions
 127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
 128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group1 Initialization and de-initialization functions 
 131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *  @brief    Initialization and Configuration functions 
 132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
 133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @verbatim    
 134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ===============================================================================
 135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****            ##### Initialization and de-initialization functions #####
 136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ===============================================================================
 137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..]
 138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       This section provides functions allowing to configure the internal/external oscillators
 139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (HSE, HSI, LSE, LSI, PLL, CSS and MCO) and the System buses clocks (SYSCLK, AHB, APB1
 140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       and APB2).
 141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..] Internal/external clock and PLL configuration
 143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) HSI (high-speed internal), 8 MHz factory-trimmed RC used directly or through
 144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           the PLL as System clock source.
 145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) LSI (low-speed internal), ~40 KHz low consumption RC used as IWDG and/or RTC
 146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           clock source.
ARM GAS  /tmp/ccxUz4Br.s 			page 4


 147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) HSE (high-speed external), 4 to 24 MHz (STM32F100xx) or 4 to 16 MHz (STM32F101x/STM32F102
 149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) PLL (clocked by HSI or HSE), featuring different output clocks:
 154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         (++) The first output is used to generate the high speed system clock (up to 72 MHz for STM
 155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         (++) The second output is used to generate the clock for the USB OTG FS (48 MHz)
 156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) CSS (Clock security system), once enable using the macro __HAL_RCC_CSS_ENABLE()
 158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           and if a HSE clock failure occurs(HSE used directly or through PLL as System 
 159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           clock source), the System clocks automatically switched to HSI and an interrupt
 160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           is generated if enabled. The interrupt is linked to the Cortex-M3 NMI 
 161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (Non-Maskable Interrupt) exception vector.   
 162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) MCO1 (microcontroller clock output), used to output SYSCLK, HSI,  
 164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           HSE or PLL clock (divided by 2) on PA8 pin + PLL2CLK, PLL3CLK/2, PLL3CLK and XTI for STM3
 165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..] System, AHB and APB buses clocks configuration
 167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           HSE and PLL.
 169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable
 170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped
 171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived
 172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           from AHB clock through configurable prescalers and used to clock
 173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           the peripherals mapped on these buses. You can use
 174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           "@ref HAL_RCC_GetSysClockFreq()" function to retrieve the frequencies of these clocks.
 175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (+@) RTC: RTC clock can be derived either from the LSI, LSE or HSE clock
 178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****               divided by 128. 
 179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (+@) USB OTG FS and RTC: USB OTG FS require a frequency equal to 48 MHz
 180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****               to work correctly. This clock is derived of the main PLL through PLL Multiplier.
 181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (+@) I2S interface on STM32F105x/STM32F107x can be derived from PLL3CLK
 182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (+@) IWDG clock which is always the LSI clock.
 183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       (#) For STM32F10xxx, the maximum frequency of the SYSCLK and HCLK/PCLK2 is 72 MHz, PCLK1 36 M
 185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           For STM32F100xx, the maximum frequency of the SYSCLK and HCLK/PCLK1/PCLK2 is 24 MHz.  
 186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           Depending on the SYSCLK frequency, the flash latency should be adapted accordingly.
 187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @endverbatim
 188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
 189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /*
 192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   Additional consideration on the SYSCLK based on Latency settings:
 193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         +-----------------------------------------------+
 194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         | Latency       | SYSCLK clock frequency (MHz)  |
 195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |---------------|-------------------------------|
 196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |0WS(1CPU cycle)|       0 < SYSCLK <= 24        |
 197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |---------------|-------------------------------|
 198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |1WS(2CPU cycle)|      24 < SYSCLK <= 48        |
 199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |---------------|-------------------------------|
 200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         |2WS(3CPU cycle)|      48 < SYSCLK <= 72        |
 201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         +-----------------------------------------------+
 202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
ARM GAS  /tmp/ccxUz4Br.s 			page 5


 204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - HSI ON and used as system clock source
 208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - HSE, PLL, PLL2 and PLL3 are OFF
 209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - CSS and MCO1 OFF
 211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - All interrupts disabled
 212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - All flags are cleared
 213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   This function does not modify the configuration of the
 214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - Peripheral clocks
 215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            - LSI, LSE and RTC clocks
 216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval HAL_StatusTypeDef
 217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_DeInit(void)
 219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
  27              		.loc 1 219 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
 220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t tickstart;
 221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
  42              		.loc 1 223 0
  43 0006 FFF7FEFF 		bl	HAL_GetTick
  44 000a 7860     		str	r0, [r7, #4]
 224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Set HSION bit */
 226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   SET_BIT(RCC->CR, RCC_CR_HSION);
  45              		.loc 1 226 0
  46 000c 444A     		ldr	r2, .L12
  47 000e 444B     		ldr	r3, .L12
  48 0010 1B68     		ldr	r3, [r3]
  49 0012 43F00103 		orr	r3, r3, #1
  50 0016 1360     		str	r3, [r2]
 227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till HSI is ready */
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
  51              		.loc 1 229 0
  52 0018 08E0     		b	.L2
  53              	.L4:
 230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
  54              		.loc 1 231 0
  55 001a FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccxUz4Br.s 			page 6


  56 001e 0246     		mov	r2, r0
  57 0020 7B68     		ldr	r3, [r7, #4]
  58 0022 D31A     		subs	r3, r2, r3
  59 0024 022B     		cmp	r3, #2
  60 0026 01D9     		bls	.L2
 232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
  61              		.loc 1 233 0
  62 0028 0323     		movs	r3, #3
  63 002a 75E0     		b	.L3
  64              	.L2:
 229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
  65              		.loc 1 229 0
  66 002c 3C4B     		ldr	r3, .L12
  67 002e 1B68     		ldr	r3, [r3]
  68 0030 03F00203 		and	r3, r3, #2
  69 0034 002B     		cmp	r3, #0
  70 0036 F0D0     		beq	.L4
 234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Set HSITRIM bits to the reset value */
 238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
  71              		.loc 1 238 0
  72 0038 394A     		ldr	r2, .L12
  73 003a 394B     		ldr	r3, .L12
  74 003c 1B68     		ldr	r3, [r3]
  75 003e 23F0F803 		bic	r3, r3, #248
  76 0042 43F08003 		orr	r3, r3, #128
  77 0046 1360     		str	r3, [r2]
 239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
  78              		.loc 1 241 0
  79 0048 FFF7FEFF 		bl	HAL_GetTick
  80 004c 7860     		str	r0, [r7, #4]
 242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Reset CFGR register */
 244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR);
  81              		.loc 1 244 0
  82 004e 344B     		ldr	r3, .L12
  83 0050 0022     		movs	r2, #0
  84 0052 5A60     		str	r2, [r3, #4]
 245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till clock switch is ready */
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
  85              		.loc 1 247 0
  86 0054 0AE0     		b	.L5
  87              	.L6:
 248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
  88              		.loc 1 249 0
  89 0056 FFF7FEFF 		bl	HAL_GetTick
  90 005a 0246     		mov	r2, r0
  91 005c 7B68     		ldr	r3, [r7, #4]
  92 005e D31A     		subs	r3, r2, r3
  93 0060 41F28832 		movw	r2, #5000
ARM GAS  /tmp/ccxUz4Br.s 			page 7


  94 0064 9342     		cmp	r3, r2
  95 0066 01D9     		bls	.L5
 250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
  96              		.loc 1 251 0
  97 0068 0323     		movs	r3, #3
  98 006a 55E0     		b	.L3
  99              	.L5:
 247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 100              		.loc 1 247 0
 101 006c 2C4B     		ldr	r3, .L12
 102 006e 5B68     		ldr	r3, [r3, #4]
 103 0070 03F00C03 		and	r3, r3, #12
 104 0074 002B     		cmp	r3, #0
 105 0076 EED1     		bne	.L6
 252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   SystemCoreClock = HSI_VALUE;
 106              		.loc 1 256 0
 107 0078 2A4B     		ldr	r3, .L12+4
 108 007a 2B4A     		ldr	r2, .L12+8
 109 007c 1A60     		str	r2, [r3]
 257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Adapt Systick interrupt period */
 259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 110              		.loc 1 259 0
 111 007e 0020     		movs	r0, #0
 112 0080 FFF7FEFF 		bl	HAL_InitTick
 113 0084 0346     		mov	r3, r0
 114 0086 002B     		cmp	r3, #0
 115 0088 01D0     		beq	.L7
 260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     return HAL_ERROR;
 116              		.loc 1 261 0
 117 008a 0123     		movs	r3, #1
 118 008c 44E0     		b	.L3
 119              	.L7:
 262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 120              		.loc 1 265 0
 121 008e FFF7FEFF 		bl	HAL_GetTick
 122 0092 7860     		str	r0, [r7, #4]
 266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Second step is to clear PLLON bit */
 268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 123              		.loc 1 268 0
 124 0094 224A     		ldr	r2, .L12
 125 0096 224B     		ldr	r3, .L12
 126 0098 1B68     		ldr	r3, [r3]
 127 009a 23F08073 		bic	r3, r3, #16777216
 128 009e 1360     		str	r3, [r2]
 269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till PLL is disabled */
ARM GAS  /tmp/ccxUz4Br.s 			page 8


 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 129              		.loc 1 271 0
 130 00a0 08E0     		b	.L8
 131              	.L9:
 272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 132              		.loc 1 273 0
 133 00a2 FFF7FEFF 		bl	HAL_GetTick
 134 00a6 0246     		mov	r2, r0
 135 00a8 7B68     		ldr	r3, [r7, #4]
 136 00aa D31A     		subs	r3, r2, r3
 137 00ac 022B     		cmp	r3, #2
 138 00ae 01D9     		bls	.L8
 274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 139              		.loc 1 275 0
 140 00b0 0323     		movs	r3, #3
 141 00b2 31E0     		b	.L3
 142              	.L8:
 271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 143              		.loc 1 271 0
 144 00b4 1A4B     		ldr	r3, .L12
 145 00b6 1B68     		ldr	r3, [r3]
 146 00b8 03F00073 		and	r3, r3, #33554432
 147 00bc 002B     		cmp	r3, #0
 148 00be F0D1     		bne	.L9
 276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Ensure to reset PLLSRC and PLLMUL bits */
 280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR);
 149              		.loc 1 280 0
 150 00c0 174B     		ldr	r3, .L12
 151 00c2 0022     		movs	r2, #0
 152 00c4 5A60     		str	r2, [r3, #4]
 281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 153              		.loc 1 283 0
 154 00c6 FFF7FEFF 		bl	HAL_GetTick
 155 00ca 7860     		str	r0, [r7, #4]
 284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Reset HSEON & CSSON bits */
 286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 156              		.loc 1 286 0
 157 00cc 144A     		ldr	r2, .L12
 158 00ce 144B     		ldr	r3, .L12
 159 00d0 1B68     		ldr	r3, [r3]
 160 00d2 23F41023 		bic	r3, r3, #589824
 161 00d6 1360     		str	r3, [r2]
 287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till HSE is disabled */
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 162              		.loc 1 289 0
 163 00d8 08E0     		b	.L10
 164              	.L11:
 290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
ARM GAS  /tmp/ccxUz4Br.s 			page 9


 291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 165              		.loc 1 291 0
 166 00da FFF7FEFF 		bl	HAL_GetTick
 167 00de 0246     		mov	r2, r0
 168 00e0 7B68     		ldr	r3, [r7, #4]
 169 00e2 D31A     		subs	r3, r2, r3
 170 00e4 642B     		cmp	r3, #100
 171 00e6 01D9     		bls	.L10
 292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 172              		.loc 1 293 0
 173 00e8 0323     		movs	r3, #3
 174 00ea 15E0     		b	.L3
 175              	.L10:
 289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 176              		.loc 1 289 0
 177 00ec 0C4B     		ldr	r3, .L12
 178 00ee 1B68     		ldr	r3, [r3]
 179 00f0 03F40033 		and	r3, r3, #131072
 180 00f4 002B     		cmp	r3, #0
 181 00f6 F0D1     		bne	.L11
 294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Reset HSEBYP bit */
 298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 182              		.loc 1 298 0
 183 00f8 094A     		ldr	r2, .L12
 184 00fa 094B     		ldr	r3, .L12
 185 00fc 1B68     		ldr	r3, [r3]
 186 00fe 23F48023 		bic	r3, r3, #262144
 187 0102 1360     		str	r3, [r2]
 299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_PLL2_SUPPORT)
 301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Clear PLL2ON bit */
 305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till PLL2 is disabled */
 308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != RESET)
 309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_PLL2_SUPPORT */
 316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_PLLI2S_SUPPORT)
 318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get Start Tick */
 319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tickstart = HAL_GetTick();
 320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Clear PLL3ON bit */
 322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
ARM GAS  /tmp/ccxUz4Br.s 			page 10


 324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Wait till PLL3 is disabled */
 325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != RESET)
 326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_TIMEOUT;
 330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_PLLI2S_SUPPORT */
 333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
 335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Reset CFGR2 register */
 336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CFGR2);
 337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CFGR2_PREDIV1 */
 338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Reset all CSR flags */
 340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 188              		.loc 1 340 0
 189 0104 064A     		ldr	r2, .L12
 190 0106 064B     		ldr	r3, .L12
 191 0108 5B6A     		ldr	r3, [r3, #36]
 192 010a 43F08073 		orr	r3, r3, #16777216
 193 010e 5362     		str	r3, [r2, #36]
 341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Disable all interrupts */
 343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   CLEAR_REG(RCC->CIR);
 194              		.loc 1 343 0
 195 0110 034B     		ldr	r3, .L12
 196 0112 0022     		movs	r2, #0
 197 0114 9A60     		str	r2, [r3, #8]
 344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return HAL_OK;
 198              		.loc 1 345 0
 199 0116 0023     		movs	r3, #0
 200              	.L3:
 346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 201              		.loc 1 346 0
 202 0118 1846     		mov	r0, r3
 203 011a 0837     		adds	r7, r7, #8
 204              	.LCFI3:
 205              		.cfi_def_cfa_offset 8
 206 011c BD46     		mov	sp, r7
 207              	.LCFI4:
 208              		.cfi_def_cfa_register 13
 209              		@ sp needed
 210 011e 80BD     		pop	{r7, pc}
 211              	.L13:
 212              		.align	2
 213              	.L12:
 214 0120 00100240 		.word	1073876992
 215 0124 00000000 		.word	SystemCoreClock
 216 0128 00127A00 		.word	8000000
 217              		.cfi_endproc
 218              	.LFE63:
 220              		.section	.text.HAL_RCC_OscConfig,"ax",%progbits
 221              		.align	2
 222              		.global	HAL_RCC_OscConfig
ARM GAS  /tmp/ccxUz4Br.s 			page 11


 223              		.thumb
 224              		.thumb_func
 226              	HAL_RCC_OscConfig:
 227              	.LFB64:
 347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Initializes the RCC Oscillators according to the specified parameters in the
 350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         RCC_OscInitTypeDef.
 351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
 352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         contains the configuration information for the RCC Oscillators.
 353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The PLL is not disabled when used as system clock.
 354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The PLL is not disabled when USB OTG FS clock is enabled (specific to devices with USB 
 355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Transitions LSE Bypass to LSE On and LSE On to LSE Bypass are not
 356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         supported by this macro. User should request a transition to LSE Off
 357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         first and then LSE On or LSE Bypass.
 358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         supported by this macro. User should request a transition to HSE Off
 360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         first and then HSE On or HSE Bypass.
 361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval HAL status
 362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
 364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 228              		.loc 1 364 0
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 24
 231              		@ frame_needed = 1, uses_anonymous_args = 0
 232 0000 80B5     		push	{r7, lr}
 233              	.LCFI5:
 234              		.cfi_def_cfa_offset 8
 235              		.cfi_offset 7, -8
 236              		.cfi_offset 14, -4
 237 0002 86B0     		sub	sp, sp, #24
 238              	.LCFI6:
 239              		.cfi_def_cfa_offset 32
 240 0004 00AF     		add	r7, sp, #0
 241              	.LCFI7:
 242              		.cfi_def_cfa_register 7
 243 0006 7860     		str	r0, [r7, #4]
 365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****    uint32_t tickstart = 0U;
 244              		.loc 1 365 0
 245 0008 0023     		movs	r3, #0
 246 000a 3B61     		str	r3, [r7, #16]
 366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(RCC_OscInitStruct != NULL);
 369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*------------------------------- HSE Configuration ------------------------*/ 
 372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 247              		.loc 1 372 0
 248 000c 7B68     		ldr	r3, [r7, #4]
 249 000e 1B68     		ldr	r3, [r3]
 250 0010 03F00103 		and	r3, r3, #1
 251 0014 002B     		cmp	r3, #0
 252 0016 00F08580 		beq	.L15
 373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
ARM GAS  /tmp/ccxUz4Br.s 			page 12


 375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowe
 378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 253              		.loc 1 378 0
 254 001a 914B     		ldr	r3, .L69
 255 001c 5B68     		ldr	r3, [r3, #4]
 256 001e 03F00C03 		and	r3, r3, #12
 257 0022 042B     		cmp	r3, #4
 258 0024 0BD0     		beq	.L16
 379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 259              		.loc 1 379 0
 260 0026 8E4B     		ldr	r3, .L69
 261 0028 5B68     		ldr	r3, [r3, #4]
 262 002a 03F00C03 		and	r3, r3, #12
 263 002e 082B     		cmp	r3, #8
 264 0030 12D1     		bne	.L17
 265              		.loc 1 379 0 is_stmt 0 discriminator 1
 266 0032 8B4B     		ldr	r3, .L69
 267 0034 5B68     		ldr	r3, [r3, #4]
 268 0036 03F48033 		and	r3, r3, #65536
 269 003a 002B     		cmp	r3, #0
 270 003c 0CD0     		beq	.L17
 271              	.L16:
 380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_
 272              		.loc 1 381 0 is_stmt 1
 273 003e 884B     		ldr	r3, .L69
 274 0040 1B68     		ldr	r3, [r3]
 275 0042 03F40033 		and	r3, r3, #131072
 276 0046 002B     		cmp	r3, #0
 277 0048 05D0     		beq	.L18
 278              		.loc 1 381 0 is_stmt 0 discriminator 1
 279 004a 7B68     		ldr	r3, [r7, #4]
 280 004c 5B68     		ldr	r3, [r3, #4]
 281 004e 002B     		cmp	r3, #0
 282 0050 01D1     		bne	.L18
 382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 283              		.loc 1 383 0 is_stmt 1
 284 0052 0123     		movs	r3, #1
 285 0054 2CE2     		b	.L19
 286              	.L18:
 381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 287              		.loc 1 381 0
 288 0056 65E0     		b	.L15
 289              	.L17:
 384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 385:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 386:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 387:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 388:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Set the new HSE configuration ---------------------------------------*/
 389:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 290              		.loc 1 389 0
 291 0058 7B68     		ldr	r3, [r7, #4]
 292 005a 5B68     		ldr	r3, [r3, #4]
 293 005c B3F5803F 		cmp	r3, #65536
ARM GAS  /tmp/ccxUz4Br.s 			page 13


 294 0060 06D1     		bne	.L20
 295              		.loc 1 389 0 is_stmt 0 discriminator 1
 296 0062 7F4A     		ldr	r2, .L69
 297 0064 7E4B     		ldr	r3, .L69
 298 0066 1B68     		ldr	r3, [r3]
 299 0068 43F48033 		orr	r3, r3, #65536
 300 006c 1360     		str	r3, [r2]
 301 006e 2EE0     		b	.L21
 302              	.L20:
 303              		.loc 1 389 0 discriminator 2
 304 0070 7B68     		ldr	r3, [r7, #4]
 305 0072 5B68     		ldr	r3, [r3, #4]
 306 0074 002B     		cmp	r3, #0
 307 0076 0CD1     		bne	.L22
 308              		.loc 1 389 0 discriminator 3
 309 0078 794A     		ldr	r2, .L69
 310 007a 794B     		ldr	r3, .L69
 311 007c 1B68     		ldr	r3, [r3]
 312 007e 23F48033 		bic	r3, r3, #65536
 313 0082 1360     		str	r3, [r2]
 314 0084 764A     		ldr	r2, .L69
 315 0086 764B     		ldr	r3, .L69
 316 0088 1B68     		ldr	r3, [r3]
 317 008a 23F48023 		bic	r3, r3, #262144
 318 008e 1360     		str	r3, [r2]
 319 0090 1DE0     		b	.L21
 320              	.L22:
 321              		.loc 1 389 0 discriminator 4
 322 0092 7B68     		ldr	r3, [r7, #4]
 323 0094 5B68     		ldr	r3, [r3, #4]
 324 0096 B3F5A02F 		cmp	r3, #327680
 325 009a 0CD1     		bne	.L23
 326              		.loc 1 389 0 discriminator 5
 327 009c 704A     		ldr	r2, .L69
 328 009e 704B     		ldr	r3, .L69
 329 00a0 1B68     		ldr	r3, [r3]
 330 00a2 43F48023 		orr	r3, r3, #262144
 331 00a6 1360     		str	r3, [r2]
 332 00a8 6D4A     		ldr	r2, .L69
 333 00aa 6D4B     		ldr	r3, .L69
 334 00ac 1B68     		ldr	r3, [r3]
 335 00ae 43F48033 		orr	r3, r3, #65536
 336 00b2 1360     		str	r3, [r2]
 337 00b4 0BE0     		b	.L21
 338              	.L23:
 339              		.loc 1 389 0 discriminator 6
 340 00b6 6A4A     		ldr	r2, .L69
 341 00b8 694B     		ldr	r3, .L69
 342 00ba 1B68     		ldr	r3, [r3]
 343 00bc 23F48033 		bic	r3, r3, #65536
 344 00c0 1360     		str	r3, [r2]
 345 00c2 674A     		ldr	r2, .L69
 346 00c4 664B     		ldr	r3, .L69
 347 00c6 1B68     		ldr	r3, [r3]
 348 00c8 23F48023 		bic	r3, r3, #262144
 349 00cc 1360     		str	r3, [r2]
 350              	.L21:
ARM GAS  /tmp/ccxUz4Br.s 			page 14


 390:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       
 391:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 392:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****        /* Check the HSE State */
 393:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 351              		.loc 1 393 0 is_stmt 1
 352 00ce 7B68     		ldr	r3, [r7, #4]
 353 00d0 5B68     		ldr	r3, [r3, #4]
 354 00d2 002B     		cmp	r3, #0
 355 00d4 13D0     		beq	.L24
 394:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 395:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 396:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 356              		.loc 1 396 0
 357 00d6 FFF7FEFF 		bl	HAL_GetTick
 358 00da 3861     		str	r0, [r7, #16]
 397:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 398:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till HSE is ready */
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 359              		.loc 1 399 0
 360 00dc 08E0     		b	.L25
 361              	.L26:
 400:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 401:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 362              		.loc 1 401 0
 363 00de FFF7FEFF 		bl	HAL_GetTick
 364 00e2 0246     		mov	r2, r0
 365 00e4 3B69     		ldr	r3, [r7, #16]
 366 00e6 D31A     		subs	r3, r2, r3
 367 00e8 642B     		cmp	r3, #100
 368 00ea 01D9     		bls	.L25
 402:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 403:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 369              		.loc 1 403 0
 370 00ec 0323     		movs	r3, #3
 371 00ee DFE1     		b	.L19
 372              	.L25:
 399:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 373              		.loc 1 399 0
 374 00f0 5B4B     		ldr	r3, .L69
 375 00f2 1B68     		ldr	r3, [r3]
 376 00f4 03F40033 		and	r3, r3, #131072
 377 00f8 002B     		cmp	r3, #0
 378 00fa F0D0     		beq	.L26
 379 00fc 12E0     		b	.L15
 380              	.L24:
 404:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 405:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 406:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 407:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 408:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 409:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 410:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 381              		.loc 1 410 0
 382 00fe FFF7FEFF 		bl	HAL_GetTick
 383 0102 3861     		str	r0, [r7, #16]
 411:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 412:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till HSE is disabled */
ARM GAS  /tmp/ccxUz4Br.s 			page 15


 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 384              		.loc 1 413 0
 385 0104 08E0     		b	.L27
 386              	.L28:
 414:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 415:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****            if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 387              		.loc 1 415 0
 388 0106 FFF7FEFF 		bl	HAL_GetTick
 389 010a 0246     		mov	r2, r0
 390 010c 3B69     		ldr	r3, [r7, #16]
 391 010e D31A     		subs	r3, r2, r3
 392 0110 642B     		cmp	r3, #100
 393 0112 01D9     		bls	.L27
 416:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 417:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 394              		.loc 1 417 0
 395 0114 0323     		movs	r3, #3
 396 0116 CBE1     		b	.L19
 397              	.L27:
 413:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 398              		.loc 1 413 0
 399 0118 514B     		ldr	r3, .L69
 400 011a 1B68     		ldr	r3, [r3]
 401 011c 03F40033 		and	r3, r3, #131072
 402 0120 002B     		cmp	r3, #0
 403 0122 F0D1     		bne	.L28
 404              	.L15:
 418:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 419:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 420:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 421:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 422:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 423:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*----------------------------- HSI Configuration --------------------------*/ 
 424:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 405              		.loc 1 424 0
 406 0124 7B68     		ldr	r3, [r7, #4]
 407 0126 1B68     		ldr	r3, [r3]
 408 0128 03F00203 		and	r3, r3, #2
 409 012c 002B     		cmp	r3, #0
 410 012e 63D0     		beq	.L29
 425:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 426:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 427:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 428:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 429:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     
 430:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock *
 431:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 411              		.loc 1 431 0
 412 0130 4B4B     		ldr	r3, .L69
 413 0132 5B68     		ldr	r3, [r3, #4]
 414 0134 03F00C03 		and	r3, r3, #12
 415 0138 002B     		cmp	r3, #0
 416 013a 0BD0     		beq	.L30
 432:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_
 417              		.loc 1 432 0
 418 013c 484B     		ldr	r3, .L69
 419 013e 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/ccxUz4Br.s 			page 16


 420 0140 03F00C03 		and	r3, r3, #12
 421 0144 082B     		cmp	r3, #8
 422 0146 1CD1     		bne	.L31
 423              		.loc 1 432 0 is_stmt 0 discriminator 1
 424 0148 454B     		ldr	r3, .L69
 425 014a 5B68     		ldr	r3, [r3, #4]
 426 014c 03F48033 		and	r3, r3, #65536
 427 0150 002B     		cmp	r3, #0
 428 0152 16D1     		bne	.L31
 429              	.L30:
 433:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 434:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* When HSI is used as system clock it will not disabled */
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_
 430              		.loc 1 435 0 is_stmt 1
 431 0154 424B     		ldr	r3, .L69
 432 0156 1B68     		ldr	r3, [r3]
 433 0158 03F00203 		and	r3, r3, #2
 434 015c 002B     		cmp	r3, #0
 435 015e 05D0     		beq	.L32
 436              		.loc 1 435 0 is_stmt 0 discriminator 1
 437 0160 7B68     		ldr	r3, [r7, #4]
 438 0162 1B69     		ldr	r3, [r3, #16]
 439 0164 012B     		cmp	r3, #1
 440 0166 01D0     		beq	.L32
 436:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 437:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 441              		.loc 1 437 0 is_stmt 1
 442 0168 0123     		movs	r3, #1
 443 016a A1E1     		b	.L19
 444              	.L32:
 438:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 439:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Otherwise, just the calibration is allowed */
 440:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 441:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 442:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 443:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 445              		.loc 1 443 0
 446 016c 3C49     		ldr	r1, .L69
 447 016e 3C4B     		ldr	r3, .L69
 448 0170 1B68     		ldr	r3, [r3]
 449 0172 23F0F802 		bic	r2, r3, #248
 450 0176 7B68     		ldr	r3, [r7, #4]
 451 0178 5B69     		ldr	r3, [r3, #20]
 452 017a DB00     		lsls	r3, r3, #3
 453 017c 1343     		orrs	r3, r3, r2
 454 017e 0B60     		str	r3, [r1]
 435:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 455              		.loc 1 435 0
 456 0180 3AE0     		b	.L29
 457              	.L31:
 444:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 445:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 446:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 447:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 448:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Check the HSI State */
 449:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 458              		.loc 1 449 0
ARM GAS  /tmp/ccxUz4Br.s 			page 17


 459 0182 7B68     		ldr	r3, [r7, #4]
 460 0184 1B69     		ldr	r3, [r3, #16]
 461 0186 002B     		cmp	r3, #0
 462 0188 20D0     		beq	.L33
 450:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 451:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****        /* Enable the Internal High Speed oscillator (HSI). */
 452:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_ENABLE();
 463              		.loc 1 452 0
 464 018a 364B     		ldr	r3, .L69+4
 465 018c 0122     		movs	r2, #1
 466 018e 1A60     		str	r2, [r3]
 453:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 454:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 455:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 467              		.loc 1 455 0
 468 0190 FFF7FEFF 		bl	HAL_GetTick
 469 0194 3861     		str	r0, [r7, #16]
 456:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 457:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till HSI is ready */
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 470              		.loc 1 458 0
 471 0196 08E0     		b	.L34
 472              	.L35:
 459:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 460:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 473              		.loc 1 460 0
 474 0198 FFF7FEFF 		bl	HAL_GetTick
 475 019c 0246     		mov	r2, r0
 476 019e 3B69     		ldr	r3, [r7, #16]
 477 01a0 D31A     		subs	r3, r2, r3
 478 01a2 022B     		cmp	r3, #2
 479 01a4 01D9     		bls	.L34
 461:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 462:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 480              		.loc 1 462 0
 481 01a6 0323     		movs	r3, #3
 482 01a8 82E1     		b	.L19
 483              	.L34:
 458:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 484              		.loc 1 458 0
 485 01aa 2D4B     		ldr	r3, .L69
 486 01ac 1B68     		ldr	r3, [r3]
 487 01ae 03F00203 		and	r3, r3, #2
 488 01b2 002B     		cmp	r3, #0
 489 01b4 F0D0     		beq	.L35
 463:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 464:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 465:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                 
 466:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
 467:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 490              		.loc 1 467 0
 491 01b6 2A49     		ldr	r1, .L69
 492 01b8 294B     		ldr	r3, .L69
 493 01ba 1B68     		ldr	r3, [r3]
 494 01bc 23F0F802 		bic	r2, r3, #248
 495 01c0 7B68     		ldr	r3, [r7, #4]
 496 01c2 5B69     		ldr	r3, [r3, #20]
ARM GAS  /tmp/ccxUz4Br.s 			page 18


 497 01c4 DB00     		lsls	r3, r3, #3
 498 01c6 1343     		orrs	r3, r3, r2
 499 01c8 0B60     		str	r3, [r1]
 500 01ca 15E0     		b	.L29
 501              	.L33:
 468:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 469:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 470:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 471:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Disable the Internal High Speed oscillator (HSI). */
 472:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSI_DISABLE();
 502              		.loc 1 472 0
 503 01cc 254B     		ldr	r3, .L69+4
 504 01ce 0022     		movs	r2, #0
 505 01d0 1A60     		str	r2, [r3]
 473:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 474:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 475:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 506              		.loc 1 475 0
 507 01d2 FFF7FEFF 		bl	HAL_GetTick
 508 01d6 3861     		str	r0, [r7, #16]
 476:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 477:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till HSI is disabled */
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 509              		.loc 1 478 0
 510 01d8 08E0     		b	.L36
 511              	.L37:
 479:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 480:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 512              		.loc 1 480 0
 513 01da FFF7FEFF 		bl	HAL_GetTick
 514 01de 0246     		mov	r2, r0
 515 01e0 3B69     		ldr	r3, [r7, #16]
 516 01e2 D31A     		subs	r3, r2, r3
 517 01e4 022B     		cmp	r3, #2
 518 01e6 01D9     		bls	.L36
 481:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 482:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 519              		.loc 1 482 0
 520 01e8 0323     		movs	r3, #3
 521 01ea 61E1     		b	.L19
 522              	.L36:
 478:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 523              		.loc 1 478 0
 524 01ec 1C4B     		ldr	r3, .L69
 525 01ee 1B68     		ldr	r3, [r3]
 526 01f0 03F00203 		and	r3, r3, #2
 527 01f4 002B     		cmp	r3, #0
 528 01f6 F0D1     		bne	.L37
 529              	.L29:
 483:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 484:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 485:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 486:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 487:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 488:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*------------------------------ LSI Configuration -------------------------*/ 
 489:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 530              		.loc 1 489 0
ARM GAS  /tmp/ccxUz4Br.s 			page 19


 531 01f8 7B68     		ldr	r3, [r7, #4]
 532 01fa 1B68     		ldr	r3, [r3]
 533 01fc 03F00803 		and	r3, r3, #8
 534 0200 002B     		cmp	r3, #0
 535 0202 39D0     		beq	.L38
 490:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 491:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 492:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 493:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     
 494:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the LSI State */
 495:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 536              		.loc 1 495 0
 537 0204 7B68     		ldr	r3, [r7, #4]
 538 0206 9B69     		ldr	r3, [r3, #24]
 539 0208 002B     		cmp	r3, #0
 540 020a 19D0     		beq	.L39
 496:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 497:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Enable the Internal Low Speed oscillator (LSI). */
 498:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_LSI_ENABLE();
 541              		.loc 1 498 0
 542 020c 164B     		ldr	r3, .L69+8
 543 020e 0122     		movs	r2, #1
 544 0210 1A60     		str	r2, [r3]
 499:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       
 500:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 501:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 545              		.loc 1 501 0
 546 0212 FFF7FEFF 		bl	HAL_GetTick
 547 0216 3861     		str	r0, [r7, #16]
 502:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       
 503:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Wait till LSI is ready */  
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 548              		.loc 1 504 0
 549 0218 08E0     		b	.L40
 550              	.L41:
 505:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 506:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 551              		.loc 1 506 0
 552 021a FFF7FEFF 		bl	HAL_GetTick
 553 021e 0246     		mov	r2, r0
 554 0220 3B69     		ldr	r3, [r7, #16]
 555 0222 D31A     		subs	r3, r2, r3
 556 0224 022B     		cmp	r3, #2
 557 0226 01D9     		bls	.L40
 507:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 508:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 558              		.loc 1 508 0
 559 0228 0323     		movs	r3, #3
 560 022a 41E1     		b	.L19
 561              	.L40:
 504:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 562              		.loc 1 504 0
 563 022c 0C4B     		ldr	r3, .L69
 564 022e 5B6A     		ldr	r3, [r3, #36]
 565 0230 03F00203 		and	r3, r3, #2
 566 0234 002B     		cmp	r3, #0
 567 0236 F0D0     		beq	.L41
ARM GAS  /tmp/ccxUz4Br.s 			page 20


 509:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 510:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 511:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
 512:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           should be added.*/
 513:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       RCC_Delay(1);
 568              		.loc 1 513 0
 569 0238 0120     		movs	r0, #1
 570 023a FFF7FEFF 		bl	RCC_Delay
 571 023e 1BE0     		b	.L38
 572              	.L39:
 514:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 515:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 516:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 517:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Disable the Internal Low Speed oscillator (LSI). */
 518:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_LSI_DISABLE();
 573              		.loc 1 518 0
 574 0240 094B     		ldr	r3, .L69+8
 575 0242 0022     		movs	r2, #0
 576 0244 1A60     		str	r2, [r3]
 519:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       
 520:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 521:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 577              		.loc 1 521 0
 578 0246 FFF7FEFF 		bl	HAL_GetTick
 579 024a 3861     		str	r0, [r7, #16]
 522:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       
 523:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Wait till LSI is disabled */  
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 580              		.loc 1 524 0
 581 024c 0EE0     		b	.L42
 582              	.L43:
 525:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 526:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 583              		.loc 1 526 0
 584 024e FFF7FEFF 		bl	HAL_GetTick
 585 0252 0246     		mov	r2, r0
 586 0254 3B69     		ldr	r3, [r7, #16]
 587 0256 D31A     		subs	r3, r2, r3
 588 0258 022B     		cmp	r3, #2
 589 025a 07D9     		bls	.L42
 527:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 528:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 590              		.loc 1 528 0
 591 025c 0323     		movs	r3, #3
 592 025e 27E1     		b	.L19
 593              	.L70:
 594              		.align	2
 595              	.L69:
 596 0260 00100240 		.word	1073876992
 597 0264 00004242 		.word	1111621632
 598 0268 80044242 		.word	1111622784
 599              	.L42:
 524:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 600              		.loc 1 524 0
 601 026c 924B     		ldr	r3, .L71
 602 026e 5B6A     		ldr	r3, [r3, #36]
 603 0270 03F00203 		and	r3, r3, #2
ARM GAS  /tmp/ccxUz4Br.s 			page 21


 604 0274 002B     		cmp	r3, #0
 605 0276 EAD1     		bne	.L43
 606              	.L38:
 529:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 530:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 531:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 532:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 533:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*------------------------------ LSE Configuration -------------------------*/ 
 534:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 607              		.loc 1 534 0
 608 0278 7B68     		ldr	r3, [r7, #4]
 609 027a 1B68     		ldr	r3, [r3]
 610 027c 03F00403 		and	r3, r3, #4
 611 0280 002B     		cmp	r3, #0
 612 0282 00F0A680 		beq	.L44
 613              	.LBB4:
 535:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 536:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     FlagStatus       pwrclkchanged = RESET;
 614              		.loc 1 536 0
 615 0286 0023     		movs	r3, #0
 616 0288 FB75     		strb	r3, [r7, #23]
 537:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     
 538:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the parameters */
 539:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 540:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 541:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Update LSE configuration in Backup Domain control register    */
 542:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Requires to enable write access to Backup Domain of necessary */
 543:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 617              		.loc 1 543 0
 618 028a 8B4B     		ldr	r3, .L71
 619 028c DB69     		ldr	r3, [r3, #28]
 620 028e 03F08053 		and	r3, r3, #268435456
 621 0292 002B     		cmp	r3, #0
 622 0294 0DD1     		bne	.L45
 623              	.LBB5:
 544:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 545:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_PWR_CLK_ENABLE();
 624              		.loc 1 545 0
 625 0296 884A     		ldr	r2, .L71
 626 0298 874B     		ldr	r3, .L71
 627 029a DB69     		ldr	r3, [r3, #28]
 628 029c 43F08053 		orr	r3, r3, #268435456
 629 02a0 D361     		str	r3, [r2, #28]
 630 02a2 854B     		ldr	r3, .L71
 631 02a4 DB69     		ldr	r3, [r3, #28]
 632 02a6 03F08053 		and	r3, r3, #268435456
 633 02aa FB60     		str	r3, [r7, #12]
 634 02ac FB68     		ldr	r3, [r7, #12]
 635              	.LBE5:
 546:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       pwrclkchanged = SET;
 636              		.loc 1 546 0
 637 02ae 0123     		movs	r3, #1
 638 02b0 FB75     		strb	r3, [r7, #23]
 639              	.L45:
 547:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 548:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     
 549:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
ARM GAS  /tmp/ccxUz4Br.s 			page 22


 640              		.loc 1 549 0
 641 02b2 824B     		ldr	r3, .L71+4
 642 02b4 1B68     		ldr	r3, [r3]
 643 02b6 03F48073 		and	r3, r3, #256
 644 02ba 002B     		cmp	r3, #0
 645 02bc 18D1     		bne	.L46
 550:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 551:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Enable write access to Backup domain */
 552:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       SET_BIT(PWR->CR, PWR_CR_DBP);
 646              		.loc 1 552 0
 647 02be 7F4A     		ldr	r2, .L71+4
 648 02c0 7E4B     		ldr	r3, .L71+4
 649 02c2 1B68     		ldr	r3, [r3]
 650 02c4 43F48073 		orr	r3, r3, #256
 651 02c8 1360     		str	r3, [r2]
 553:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       
 554:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Wait for Backup domain Write protection disable */
 555:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 652              		.loc 1 555 0
 653 02ca FFF7FEFF 		bl	HAL_GetTick
 654 02ce 3861     		str	r0, [r7, #16]
 556:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 655              		.loc 1 557 0
 656 02d0 08E0     		b	.L47
 657              	.L48:
 558:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 559:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 658              		.loc 1 559 0
 659 02d2 FFF7FEFF 		bl	HAL_GetTick
 660 02d6 0246     		mov	r2, r0
 661 02d8 3B69     		ldr	r3, [r7, #16]
 662 02da D31A     		subs	r3, r2, r3
 663 02dc 642B     		cmp	r3, #100
 664 02de 01D9     		bls	.L47
 560:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 561:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 665              		.loc 1 561 0
 666 02e0 0323     		movs	r3, #3
 667 02e2 E5E0     		b	.L19
 668              	.L47:
 557:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 669              		.loc 1 557 0
 670 02e4 754B     		ldr	r3, .L71+4
 671 02e6 1B68     		ldr	r3, [r3]
 672 02e8 03F48073 		and	r3, r3, #256
 673 02ec 002B     		cmp	r3, #0
 674 02ee F0D0     		beq	.L48
 675              	.L46:
 562:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 563:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 564:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 565:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 566:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Set the new LSE configuration -----------------------------------------*/
 567:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 676              		.loc 1 567 0
 677 02f0 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccxUz4Br.s 			page 23


 678 02f2 DB68     		ldr	r3, [r3, #12]
 679 02f4 012B     		cmp	r3, #1
 680 02f6 06D1     		bne	.L49
 681              		.loc 1 567 0 is_stmt 0 discriminator 1
 682 02f8 6F4A     		ldr	r2, .L71
 683 02fa 6F4B     		ldr	r3, .L71
 684 02fc 1B6A     		ldr	r3, [r3, #32]
 685 02fe 43F00103 		orr	r3, r3, #1
 686 0302 1362     		str	r3, [r2, #32]
 687 0304 2DE0     		b	.L50
 688              	.L49:
 689              		.loc 1 567 0 discriminator 2
 690 0306 7B68     		ldr	r3, [r7, #4]
 691 0308 DB68     		ldr	r3, [r3, #12]
 692 030a 002B     		cmp	r3, #0
 693 030c 0CD1     		bne	.L51
 694              		.loc 1 567 0 discriminator 3
 695 030e 6A4A     		ldr	r2, .L71
 696 0310 694B     		ldr	r3, .L71
 697 0312 1B6A     		ldr	r3, [r3, #32]
 698 0314 23F00103 		bic	r3, r3, #1
 699 0318 1362     		str	r3, [r2, #32]
 700 031a 674A     		ldr	r2, .L71
 701 031c 664B     		ldr	r3, .L71
 702 031e 1B6A     		ldr	r3, [r3, #32]
 703 0320 23F00403 		bic	r3, r3, #4
 704 0324 1362     		str	r3, [r2, #32]
 705 0326 1CE0     		b	.L50
 706              	.L51:
 707              		.loc 1 567 0 discriminator 4
 708 0328 7B68     		ldr	r3, [r7, #4]
 709 032a DB68     		ldr	r3, [r3, #12]
 710 032c 052B     		cmp	r3, #5
 711 032e 0CD1     		bne	.L52
 712              		.loc 1 567 0 discriminator 5
 713 0330 614A     		ldr	r2, .L71
 714 0332 614B     		ldr	r3, .L71
 715 0334 1B6A     		ldr	r3, [r3, #32]
 716 0336 43F00403 		orr	r3, r3, #4
 717 033a 1362     		str	r3, [r2, #32]
 718 033c 5E4A     		ldr	r2, .L71
 719 033e 5E4B     		ldr	r3, .L71
 720 0340 1B6A     		ldr	r3, [r3, #32]
 721 0342 43F00103 		orr	r3, r3, #1
 722 0346 1362     		str	r3, [r2, #32]
 723 0348 0BE0     		b	.L50
 724              	.L52:
 725              		.loc 1 567 0 discriminator 6
 726 034a 5B4A     		ldr	r2, .L71
 727 034c 5A4B     		ldr	r3, .L71
 728 034e 1B6A     		ldr	r3, [r3, #32]
 729 0350 23F00103 		bic	r3, r3, #1
 730 0354 1362     		str	r3, [r2, #32]
 731 0356 584A     		ldr	r2, .L71
 732 0358 574B     		ldr	r3, .L71
 733 035a 1B6A     		ldr	r3, [r3, #32]
 734 035c 23F00403 		bic	r3, r3, #4
ARM GAS  /tmp/ccxUz4Br.s 			page 24


 735 0360 1362     		str	r3, [r2, #32]
 736              	.L50:
 568:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check the LSE State */
 569:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 737              		.loc 1 569 0 is_stmt 1
 738 0362 7B68     		ldr	r3, [r7, #4]
 739 0364 DB68     		ldr	r3, [r3, #12]
 740 0366 002B     		cmp	r3, #0
 741 0368 15D0     		beq	.L53
 570:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 571:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 572:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 742              		.loc 1 572 0
 743 036a FFF7FEFF 		bl	HAL_GetTick
 744 036e 3861     		str	r0, [r7, #16]
 573:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       
 574:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Wait till LSE is ready */  
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 745              		.loc 1 575 0
 746 0370 0AE0     		b	.L54
 747              	.L55:
 576:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 577:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 748              		.loc 1 577 0
 749 0372 FFF7FEFF 		bl	HAL_GetTick
 750 0376 0246     		mov	r2, r0
 751 0378 3B69     		ldr	r3, [r7, #16]
 752 037a D31A     		subs	r3, r2, r3
 753 037c 41F28832 		movw	r2, #5000
 754 0380 9342     		cmp	r3, r2
 755 0382 01D9     		bls	.L54
 578:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 579:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 756              		.loc 1 579 0
 757 0384 0323     		movs	r3, #3
 758 0386 93E0     		b	.L19
 759              	.L54:
 575:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 760              		.loc 1 575 0
 761 0388 4B4B     		ldr	r3, .L71
 762 038a 1B6A     		ldr	r3, [r3, #32]
 763 038c 03F00203 		and	r3, r3, #2
 764 0390 002B     		cmp	r3, #0
 765 0392 EED0     		beq	.L55
 766 0394 14E0     		b	.L56
 767              	.L53:
 580:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 581:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 582:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 583:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 584:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 585:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Get Start Tick */
 586:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       tickstart = HAL_GetTick();
 768              		.loc 1 586 0
 769 0396 FFF7FEFF 		bl	HAL_GetTick
 770 039a 3861     		str	r0, [r7, #16]
 587:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       
ARM GAS  /tmp/ccxUz4Br.s 			page 25


 588:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Wait till LSE is disabled */  
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 771              		.loc 1 589 0
 772 039c 0AE0     		b	.L57
 773              	.L58:
 590:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 591:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 774              		.loc 1 591 0
 775 039e FFF7FEFF 		bl	HAL_GetTick
 776 03a2 0246     		mov	r2, r0
 777 03a4 3B69     		ldr	r3, [r7, #16]
 778 03a6 D31A     		subs	r3, r2, r3
 779 03a8 41F28832 		movw	r2, #5000
 780 03ac 9342     		cmp	r3, r2
 781 03ae 01D9     		bls	.L57
 592:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 593:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 782              		.loc 1 593 0
 783 03b0 0323     		movs	r3, #3
 784 03b2 7DE0     		b	.L19
 785              	.L57:
 589:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 786              		.loc 1 589 0
 787 03b4 404B     		ldr	r3, .L71
 788 03b6 1B6A     		ldr	r3, [r3, #32]
 789 03b8 03F00203 		and	r3, r3, #2
 790 03bc 002B     		cmp	r3, #0
 791 03be EED1     		bne	.L58
 792              	.L56:
 594:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 595:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 596:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 597:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 598:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Require to disable power clock if necessary */
 599:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(pwrclkchanged == SET)
 793              		.loc 1 599 0
 794 03c0 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 795 03c2 012B     		cmp	r3, #1
 796 03c4 05D1     		bne	.L44
 600:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 601:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       __HAL_RCC_PWR_CLK_DISABLE();
 797              		.loc 1 601 0
 798 03c6 3C4A     		ldr	r2, .L71
 799 03c8 3B4B     		ldr	r3, .L71
 800 03ca DB69     		ldr	r3, [r3, #28]
 801 03cc 23F08053 		bic	r3, r3, #268435456
 802 03d0 D361     		str	r3, [r2, #28]
 803              	.L44:
 804              	.LBE4:
 602:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 603:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 604:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 605:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CR_PLL2ON)
 606:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*-------------------------------- PLL2 Configuration -----------------------*/
 607:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 608:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
 609:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
ARM GAS  /tmp/ccxUz4Br.s 			page 26


 610:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 611:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* This bit can not be cleared if the PLL2 clock is used indirectly as system 
 612:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       clock (i.e. it is used as PLL clock entry that is used as system clock). */
 613:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 614:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 615:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 616:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 617:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_ERROR;
 618:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 619:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 620:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 621:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 622:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 623:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Check the parameters */
 624:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
 625:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));
 626:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 627:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Prediv2 can be written only when the PLLI2S is disabled. */
 628:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Return an error only if new value is different from the programmed value */
 629:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 630:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 631:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 632:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_ERROR;
 633:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 634:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 635:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL2. */
 636:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_DISABLE();
 637:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 638:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 639:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 640:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 641:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL2 is disabled */
 642:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 643:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 644:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 645:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 646:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 647:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 648:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 649:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 650:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Configure the HSE prediv2 factor --------------------------------*/
 651:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 652:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 653:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Configure the main PLL2 multiplication factors. */
 654:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 655:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 656:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Enable the main PLL2. */
 657:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_ENABLE();
 658:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 659:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 660:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 661:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 662:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL2 is ready */
 663:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 664:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 665:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 666:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
ARM GAS  /tmp/ccxUz4Br.s 			page 27


 667:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 668:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 669:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 670:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 671:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 672:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 673:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****        /* Set PREDIV1 source to HSE */
 674:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 675:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 676:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL2. */
 677:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL2_DISABLE();
 678:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****  
 679:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 680:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 681:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 682:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL2 is disabled */  
 683:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 684:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 685:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 686:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 687:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 688:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 689:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 690:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 691:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 692:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 693:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 694:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CR_PLL2ON */
 695:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*-------------------------------- PLL Configuration -----------------------*/
 696:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 697:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 698:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 805              		.loc 1 698 0
 806 03d2 7B68     		ldr	r3, [r7, #4]
 807 03d4 DB69     		ldr	r3, [r3, #28]
 808 03d6 002B     		cmp	r3, #0
 809 03d8 69D0     		beq	.L59
 699:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 700:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check if the PLL is used as system clock or not */
 701:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 810              		.loc 1 701 0
 811 03da 374B     		ldr	r3, .L71
 812 03dc 5B68     		ldr	r3, [r3, #4]
 813 03de 03F00C03 		and	r3, r3, #12
 814 03e2 082B     		cmp	r3, #8
 815 03e4 61D0     		beq	.L60
 702:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     { 
 703:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 816              		.loc 1 703 0
 817 03e6 7B68     		ldr	r3, [r7, #4]
 818 03e8 DB69     		ldr	r3, [r3, #28]
 819 03ea 022B     		cmp	r3, #2
 820 03ec 46D1     		bne	.L61
 704:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 705:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Check the parameters */
 706:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 707:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
ARM GAS  /tmp/ccxUz4Br.s 			page 28


 708:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 709:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL. */
 710:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 821              		.loc 1 710 0
 822 03ee 344B     		ldr	r3, .L71+8
 823 03f0 0022     		movs	r2, #0
 824 03f2 1A60     		str	r2, [r3]
 711:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 712:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 713:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 825              		.loc 1 713 0
 826 03f4 FFF7FEFF 		bl	HAL_GetTick
 827 03f8 3861     		str	r0, [r7, #16]
 714:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 715:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL is disabled */
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 828              		.loc 1 716 0
 829 03fa 08E0     		b	.L62
 830              	.L63:
 717:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 718:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 831              		.loc 1 718 0
 832 03fc FFF7FEFF 		bl	HAL_GetTick
 833 0400 0246     		mov	r2, r0
 834 0402 3B69     		ldr	r3, [r7, #16]
 835 0404 D31A     		subs	r3, r2, r3
 836 0406 022B     		cmp	r3, #2
 837 0408 01D9     		bls	.L62
 719:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 720:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 838              		.loc 1 720 0
 839 040a 0323     		movs	r3, #3
 840 040c 50E0     		b	.L19
 841              	.L62:
 716:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 842              		.loc 1 716 0
 843 040e 2A4B     		ldr	r3, .L71
 844 0410 1B68     		ldr	r3, [r3]
 845 0412 03F00073 		and	r3, r3, #33554432
 846 0416 002B     		cmp	r3, #0
 847 0418 F0D1     		bne	.L63
 721:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 722:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 723:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 724:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Configure the HSE prediv factor --------------------------------*/
 725:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* It can be written only when the PLL is disabled. Not used in PLL source is different tha
 726:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 848              		.loc 1 726 0
 849 041a 7B68     		ldr	r3, [r7, #4]
 850 041c 1B6A     		ldr	r3, [r3, #32]
 851 041e B3F5803F 		cmp	r3, #65536
 852 0422 08D1     		bne	.L64
 727:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 728:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* Check the parameter */
 729:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 730:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
 731:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));
ARM GAS  /tmp/ccxUz4Br.s 			page 29


 732:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           
 733:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* Set PREDIV1 source */
 734:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 735:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CFGR2_PREDIV1SRC */
 736:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 737:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* Set PREDIV1 Value */
 738:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 853              		.loc 1 738 0
 854 0424 2449     		ldr	r1, .L71
 855 0426 244B     		ldr	r3, .L71
 856 0428 5B68     		ldr	r3, [r3, #4]
 857 042a 23F40032 		bic	r2, r3, #131072
 858 042e 7B68     		ldr	r3, [r7, #4]
 859 0430 9B68     		ldr	r3, [r3, #8]
 860 0432 1343     		orrs	r3, r3, r2
 861 0434 4B60     		str	r3, [r1, #4]
 862              	.L64:
 739:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 740:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 741:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Configure the main PLL clock source and multiplication factors. */
 742:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 863              		.loc 1 742 0
 864 0436 2048     		ldr	r0, .L71
 865 0438 1F4B     		ldr	r3, .L71
 866 043a 5B68     		ldr	r3, [r3, #4]
 867 043c 23F47412 		bic	r2, r3, #3997696
 868 0440 7B68     		ldr	r3, [r7, #4]
 869 0442 196A     		ldr	r1, [r3, #32]
 870 0444 7B68     		ldr	r3, [r7, #4]
 871 0446 5B6A     		ldr	r3, [r3, #36]
 872 0448 0B43     		orrs	r3, r3, r1
 873 044a 1343     		orrs	r3, r3, r2
 874 044c 4360     		str	r3, [r0, #4]
 743:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                              RCC_OscInitStruct->PLL.PLLMUL);
 744:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Enable the main PLL. */
 745:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_ENABLE();
 875              		.loc 1 745 0
 876 044e 1C4B     		ldr	r3, .L71+8
 877 0450 0122     		movs	r2, #1
 878 0452 1A60     		str	r2, [r3]
 746:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 747:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 748:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 879              		.loc 1 748 0
 880 0454 FFF7FEFF 		bl	HAL_GetTick
 881 0458 3861     		str	r0, [r7, #16]
 749:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 750:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL is ready */
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 882              		.loc 1 751 0
 883 045a 08E0     		b	.L65
 884              	.L66:
 752:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 753:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 885              		.loc 1 753 0
 886 045c FFF7FEFF 		bl	HAL_GetTick
 887 0460 0246     		mov	r2, r0
ARM GAS  /tmp/ccxUz4Br.s 			page 30


 888 0462 3B69     		ldr	r3, [r7, #16]
 889 0464 D31A     		subs	r3, r2, r3
 890 0466 022B     		cmp	r3, #2
 891 0468 01D9     		bls	.L65
 754:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 755:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 892              		.loc 1 755 0
 893 046a 0323     		movs	r3, #3
 894 046c 20E0     		b	.L19
 895              	.L65:
 751:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 896              		.loc 1 751 0
 897 046e 124B     		ldr	r3, .L71
 898 0470 1B68     		ldr	r3, [r3]
 899 0472 03F00073 		and	r3, r3, #33554432
 900 0476 002B     		cmp	r3, #0
 901 0478 F0D0     		beq	.L66
 902 047a 18E0     		b	.L59
 903              	.L61:
 756:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 757:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 758:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 759:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
 760:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 761:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Disable the main PLL. */
 762:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         __HAL_RCC_PLL_DISABLE();
 904              		.loc 1 762 0
 905 047c 104B     		ldr	r3, .L71+8
 906 047e 0022     		movs	r2, #0
 907 0480 1A60     		str	r2, [r3]
 763:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****  
 764:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Get Start Tick */
 765:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         tickstart = HAL_GetTick();
 908              		.loc 1 765 0
 909 0482 FFF7FEFF 		bl	HAL_GetTick
 910 0486 3861     		str	r0, [r7, #16]
 766:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         
 767:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* Wait till PLL is disabled */  
 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 911              		.loc 1 768 0
 912 0488 08E0     		b	.L67
 913              	.L68:
 769:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 770:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 914              		.loc 1 770 0
 915 048a FFF7FEFF 		bl	HAL_GetTick
 916 048e 0246     		mov	r2, r0
 917 0490 3B69     		ldr	r3, [r7, #16]
 918 0492 D31A     		subs	r3, r2, r3
 919 0494 022B     		cmp	r3, #2
 920 0496 01D9     		bls	.L67
 771:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           {
 772:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             return HAL_TIMEOUT;
 921              		.loc 1 772 0
 922 0498 0323     		movs	r3, #3
 923 049a 09E0     		b	.L19
 924              	.L67:
ARM GAS  /tmp/ccxUz4Br.s 			page 31


 768:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 925              		.loc 1 768 0
 926 049c 064B     		ldr	r3, .L71
 927 049e 1B68     		ldr	r3, [r3]
 928 04a0 03F00073 		and	r3, r3, #33554432
 929 04a4 002B     		cmp	r3, #0
 930 04a6 F0D1     		bne	.L68
 931 04a8 01E0     		b	.L59
 932              	.L60:
 773:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           }
 774:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 775:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 776:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 777:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 778:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 779:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_ERROR;
 933              		.loc 1 779 0
 934 04aa 0123     		movs	r3, #1
 935 04ac 00E0     		b	.L19
 936              	.L59:
 780:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 781:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 782:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 783:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return HAL_OK;
 937              		.loc 1 783 0
 938 04ae 0023     		movs	r3, #0
 939              	.L19:
 784:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 940              		.loc 1 784 0
 941 04b0 1846     		mov	r0, r3
 942 04b2 1837     		adds	r7, r7, #24
 943              	.LCFI8:
 944              		.cfi_def_cfa_offset 8
 945 04b4 BD46     		mov	sp, r7
 946              	.LCFI9:
 947              		.cfi_def_cfa_register 13
 948              		@ sp needed
 949 04b6 80BD     		pop	{r7, pc}
 950              	.L72:
 951              		.align	2
 952              	.L71:
 953 04b8 00100240 		.word	1073876992
 954 04bc 00700040 		.word	1073770496
 955 04c0 60004242 		.word	1111621728
 956              		.cfi_endproc
 957              	.LFE64:
 959              		.section	.text.HAL_RCC_ClockConfig,"ax",%progbits
 960              		.align	2
 961              		.global	HAL_RCC_ClockConfig
 962              		.thumb
 963              		.thumb_func
 965              	HAL_RCC_ClockConfig:
 966              	.LFB65:
 785:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 786:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 787:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Initializes the CPU, AHB and APB buses clocks according to the specified 
 788:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         parameters in the RCC_ClkInitStruct.
ARM GAS  /tmp/ccxUz4Br.s 			page 32


 789:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_OscInitTypeDef structure that
 790:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         contains the configuration information for the RCC peripheral.
 791:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  FLatency FLASH Latency                   
 792:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          The value of this parameter depend on device used within the same series
 793:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 794:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         and updated by @ref HAL_RCC_GetHCLKFreq() function called within this function
 795:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
 796:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 797:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         start-up from Reset, wake-up from STOP and STANDBY mode, or in case
 798:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 799:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 800:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           
 801:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 802:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         clock source is ready (clock stable after start-up delay or PLL locked). 
 803:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 804:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         occur when the clock source will be ready. 
 805:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
 806:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         currently used as system clock source.
 807:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval HAL status
 808:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 809:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
 810:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 967              		.loc 1 810 0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 16
 970              		@ frame_needed = 1, uses_anonymous_args = 0
 971 0000 80B5     		push	{r7, lr}
 972              	.LCFI10:
 973              		.cfi_def_cfa_offset 8
 974              		.cfi_offset 7, -8
 975              		.cfi_offset 14, -4
 976 0002 84B0     		sub	sp, sp, #16
 977              	.LCFI11:
 978              		.cfi_def_cfa_offset 24
 979 0004 00AF     		add	r7, sp, #0
 980              	.LCFI12:
 981              		.cfi_def_cfa_register 7
 982 0006 7860     		str	r0, [r7, #4]
 983 0008 3960     		str	r1, [r7]
 811:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t tickstart = 0U;
 984              		.loc 1 811 0
 985 000a 0023     		movs	r3, #0
 986 000c FB60     		str	r3, [r7, #12]
 812:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 813:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
 814:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(RCC_ClkInitStruct != NULL);
 815:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 816:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_FLASH_LATENCY(FLatency));
 817:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 818:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
 819:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   must be correctly programmed according to the frequency of the CPU clock 
 820:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     (HCLK) of the device. */
 821:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 822:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(FLASH_ACR_LATENCY)
 823:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Increasing the number of wait states because of higher CPU frequency */
 824:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 987              		.loc 1 824 0
ARM GAS  /tmp/ccxUz4Br.s 			page 33


 988 000e 734B     		ldr	r3, .L92
 989 0010 1B68     		ldr	r3, [r3]
 990 0012 03F00702 		and	r2, r3, #7
 991 0016 3B68     		ldr	r3, [r7]
 992 0018 9A42     		cmp	r2, r3
 993 001a 10D2     		bcs	.L74
 825:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {    
 826:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 827:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 994              		.loc 1 827 0
 995 001c 6F49     		ldr	r1, .L92
 996 001e 6F4B     		ldr	r3, .L92
 997 0020 1B68     		ldr	r3, [r3]
 998 0022 23F00702 		bic	r2, r3, #7
 999 0026 3B68     		ldr	r3, [r7]
 1000 0028 1343     		orrs	r3, r3, r2
 1001 002a 0B60     		str	r3, [r1]
 828:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     
 829:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 830:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 831:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 1002              		.loc 1 831 0
 1003 002c 6B4B     		ldr	r3, .L92
 1004 002e 1B68     		ldr	r3, [r3]
 1005 0030 03F00702 		and	r2, r3, #7
 1006 0034 3B68     		ldr	r3, [r7]
 1007 0036 9A42     		cmp	r2, r3
 1008 0038 01D0     		beq	.L74
 832:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 833:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_ERROR;
 1009              		.loc 1 833 0
 1010 003a 0123     		movs	r3, #1
 1011 003c C9E0     		b	.L75
 1012              	.L74:
 834:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 835:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 836:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 837:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* FLASH_ACR_LATENCY */
 838:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*-------------------------- HCLK Configuration --------------------------*/
 839:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 1013              		.loc 1 839 0
 1014 003e 7B68     		ldr	r3, [r7, #4]
 1015 0040 1B68     		ldr	r3, [r3]
 1016 0042 03F00203 		and	r3, r3, #2
 1017 0046 002B     		cmp	r3, #0
 1018 0048 08D0     		beq	.L76
 840:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 841:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 842:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 1019              		.loc 1 842 0
 1020 004a 6549     		ldr	r1, .L92+4
 1021 004c 644B     		ldr	r3, .L92+4
 1022 004e 5B68     		ldr	r3, [r3, #4]
 1023 0050 23F0F002 		bic	r2, r3, #240
 1024 0054 7B68     		ldr	r3, [r7, #4]
 1025 0056 9B68     		ldr	r3, [r3, #8]
 1026 0058 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccxUz4Br.s 			page 34


 1027 005a 4B60     		str	r3, [r1, #4]
 1028              	.L76:
 843:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 844:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 845:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*------------------------- SYSCLK Configuration ---------------------------*/ 
 846:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 1029              		.loc 1 846 0
 1030 005c 7B68     		ldr	r3, [r7, #4]
 1031 005e 1B68     		ldr	r3, [r3]
 1032 0060 03F00103 		and	r3, r3, #1
 1033 0064 002B     		cmp	r3, #0
 1034 0066 6BD0     		beq	.L77
 847:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {    
 848:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 849:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     
 850:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* HSE is selected as System Clock Source */
 851:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1035              		.loc 1 851 0
 1036 0068 7B68     		ldr	r3, [r7, #4]
 1037 006a 5B68     		ldr	r3, [r3, #4]
 1038 006c 012B     		cmp	r3, #1
 1039 006e 07D1     		bne	.L78
 852:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 853:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Check the HSE ready flag */  
 854:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 1040              		.loc 1 854 0
 1041 0070 5B4B     		ldr	r3, .L92+4
 1042 0072 1B68     		ldr	r3, [r3]
 1043 0074 03F40033 		and	r3, r3, #131072
 1044 0078 002B     		cmp	r3, #0
 1045 007a 15D1     		bne	.L79
 855:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 856:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 1046              		.loc 1 856 0
 1047 007c 0123     		movs	r3, #1
 1048 007e A8E0     		b	.L75
 1049              	.L78:
 857:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 858:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 859:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* PLL is selected as System Clock Source */
 860:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1050              		.loc 1 860 0
 1051 0080 7B68     		ldr	r3, [r7, #4]
 1052 0082 5B68     		ldr	r3, [r3, #4]
 1053 0084 022B     		cmp	r3, #2
 1054 0086 07D1     		bne	.L80
 861:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 862:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Check the PLL ready flag */  
 863:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 1055              		.loc 1 863 0
 1056 0088 554B     		ldr	r3, .L92+4
 1057 008a 1B68     		ldr	r3, [r3]
 1058 008c 03F00073 		and	r3, r3, #33554432
 1059 0090 002B     		cmp	r3, #0
 1060 0092 09D1     		bne	.L79
 864:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 865:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
ARM GAS  /tmp/ccxUz4Br.s 			page 35


 1061              		.loc 1 865 0
 1062 0094 0123     		movs	r3, #1
 1063 0096 9CE0     		b	.L75
 1064              	.L80:
 866:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 867:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 868:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* HSI is selected as System Clock Source */
 869:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 870:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 871:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       /* Check the HSI ready flag */  
 872:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 1065              		.loc 1 872 0
 1066 0098 514B     		ldr	r3, .L92+4
 1067 009a 1B68     		ldr	r3, [r3]
 1068 009c 03F00203 		and	r3, r3, #2
 1069 00a0 002B     		cmp	r3, #0
 1070 00a2 01D1     		bne	.L79
 873:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 874:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         return HAL_ERROR;
 1071              		.loc 1 874 0
 1072 00a4 0123     		movs	r3, #1
 1073 00a6 94E0     		b	.L75
 1074              	.L79:
 875:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 876:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 877:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 1075              		.loc 1 877 0
 1076 00a8 4D49     		ldr	r1, .L92+4
 1077 00aa 4D4B     		ldr	r3, .L92+4
 1078 00ac 5B68     		ldr	r3, [r3, #4]
 1079 00ae 23F00302 		bic	r2, r3, #3
 1080 00b2 7B68     		ldr	r3, [r7, #4]
 1081 00b4 5B68     		ldr	r3, [r3, #4]
 1082 00b6 1343     		orrs	r3, r3, r2
 1083 00b8 4B60     		str	r3, [r1, #4]
 878:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 879:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Get Start Tick */
 880:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     tickstart = HAL_GetTick();
 1084              		.loc 1 880 0
 1085 00ba FFF7FEFF 		bl	HAL_GetTick
 1086 00be F860     		str	r0, [r7, #12]
 881:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     
 882:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 1087              		.loc 1 882 0
 1088 00c0 7B68     		ldr	r3, [r7, #4]
 1089 00c2 5B68     		ldr	r3, [r3, #4]
 1090 00c4 012B     		cmp	r3, #1
 1091 00c6 12D1     		bne	.L81
 883:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 1092              		.loc 1 884 0
 1093 00c8 0AE0     		b	.L82
 1094              	.L83:
 885:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 886:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1095              		.loc 1 886 0
 1096 00ca FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccxUz4Br.s 			page 36


 1097 00ce 0246     		mov	r2, r0
 1098 00d0 FB68     		ldr	r3, [r7, #12]
 1099 00d2 D31A     		subs	r3, r2, r3
 1100 00d4 41F28832 		movw	r2, #5000
 1101 00d8 9342     		cmp	r3, r2
 1102 00da 01D9     		bls	.L82
 887:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 888:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 1103              		.loc 1 888 0
 1104 00dc 0323     		movs	r3, #3
 1105 00de 78E0     		b	.L75
 1106              	.L82:
 884:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 1107              		.loc 1 884 0
 1108 00e0 3F4B     		ldr	r3, .L92+4
 1109 00e2 5B68     		ldr	r3, [r3, #4]
 1110 00e4 03F00C03 		and	r3, r3, #12
 1111 00e8 042B     		cmp	r3, #4
 1112 00ea EED1     		bne	.L83
 1113 00ec 28E0     		b	.L77
 1114              	.L81:
 889:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 890:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 891:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 892:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 1115              		.loc 1 892 0
 1116 00ee 7B68     		ldr	r3, [r7, #4]
 1117 00f0 5B68     		ldr	r3, [r3, #4]
 1118 00f2 022B     		cmp	r3, #2
 1119 00f4 12D1     		bne	.L84
 893:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 1120              		.loc 1 894 0
 1121 00f6 0AE0     		b	.L85
 1122              	.L86:
 895:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 896:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1123              		.loc 1 896 0
 1124 00f8 FFF7FEFF 		bl	HAL_GetTick
 1125 00fc 0246     		mov	r2, r0
 1126 00fe FB68     		ldr	r3, [r7, #12]
 1127 0100 D31A     		subs	r3, r2, r3
 1128 0102 41F28832 		movw	r2, #5000
 1129 0106 9342     		cmp	r3, r2
 1130 0108 01D9     		bls	.L85
 897:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 898:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 1131              		.loc 1 898 0
 1132 010a 0323     		movs	r3, #3
 1133 010c 61E0     		b	.L75
 1134              	.L85:
 894:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 1135              		.loc 1 894 0
 1136 010e 344B     		ldr	r3, .L92+4
 1137 0110 5B68     		ldr	r3, [r3, #4]
 1138 0112 03F00C03 		and	r3, r3, #12
 1139 0116 082B     		cmp	r3, #8
ARM GAS  /tmp/ccxUz4Br.s 			page 37


 1140 0118 EED1     		bne	.L86
 1141 011a 11E0     		b	.L77
 1142              	.L84:
 899:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 900:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 901:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 902:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     else
 903:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 1143              		.loc 1 904 0
 1144 011c 0AE0     		b	.L87
 1145              	.L88:
 905:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 906:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 1146              		.loc 1 906 0
 1147 011e FFF7FEFF 		bl	HAL_GetTick
 1148 0122 0246     		mov	r2, r0
 1149 0124 FB68     		ldr	r3, [r7, #12]
 1150 0126 D31A     		subs	r3, r2, r3
 1151 0128 41F28832 		movw	r2, #5000
 1152 012c 9342     		cmp	r3, r2
 1153 012e 01D9     		bls	.L87
 907:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
 908:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           return HAL_TIMEOUT;
 1154              		.loc 1 908 0
 1155 0130 0323     		movs	r3, #3
 1156 0132 4EE0     		b	.L75
 1157              	.L87:
 904:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
 1158              		.loc 1 904 0
 1159 0134 2A4B     		ldr	r3, .L92+4
 1160 0136 5B68     		ldr	r3, [r3, #4]
 1161 0138 03F00C03 		and	r3, r3, #12
 1162 013c 002B     		cmp	r3, #0
 1163 013e EED1     		bne	.L88
 1164              	.L77:
 909:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
 910:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
 911:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }      
 912:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }    
 913:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(FLASH_ACR_LATENCY)
 914:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Decreasing the number of wait states because of lower CPU frequency */
 915:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 1165              		.loc 1 915 0
 1166 0140 264B     		ldr	r3, .L92
 1167 0142 1B68     		ldr	r3, [r3]
 1168 0144 03F00702 		and	r2, r3, #7
 1169 0148 3B68     		ldr	r3, [r7]
 1170 014a 9A42     		cmp	r2, r3
 1171 014c 10D9     		bls	.L89
 916:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {    
 917:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
 918:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __HAL_FLASH_SET_LATENCY(FLatency);
 1172              		.loc 1 918 0
 1173 014e 2349     		ldr	r1, .L92
 1174 0150 224B     		ldr	r3, .L92
 1175 0152 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccxUz4Br.s 			page 38


 1176 0154 23F00702 		bic	r2, r3, #7
 1177 0158 3B68     		ldr	r3, [r7]
 1178 015a 1343     		orrs	r3, r3, r2
 1179 015c 0B60     		str	r3, [r1]
 919:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     
 920:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Check that the new number of wait states is taken into account to access the Flash
 921:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     memory by reading the FLASH_ACR register */
 922:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 1180              		.loc 1 922 0
 1181 015e 1F4B     		ldr	r3, .L92
 1182 0160 1B68     		ldr	r3, [r3]
 1183 0162 03F00702 		and	r2, r3, #7
 1184 0166 3B68     		ldr	r3, [r7]
 1185 0168 9A42     		cmp	r2, r3
 1186 016a 01D0     		beq	.L89
 923:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
 924:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       return HAL_ERROR;
 1187              		.loc 1 924 0
 1188 016c 0123     		movs	r3, #1
 1189 016e 30E0     		b	.L75
 1190              	.L89:
 925:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
 926:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }    
 927:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* FLASH_ACR_LATENCY */
 928:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 929:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*-------------------------- PCLK1 Configuration ---------------------------*/ 
 930:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 1191              		.loc 1 930 0
 1192 0170 7B68     		ldr	r3, [r7, #4]
 1193 0172 1B68     		ldr	r3, [r3]
 1194 0174 03F00403 		and	r3, r3, #4
 1195 0178 002B     		cmp	r3, #0
 1196 017a 08D0     		beq	.L90
 931:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
 932:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 933:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 1197              		.loc 1 933 0
 1198 017c 1849     		ldr	r1, .L92+4
 1199 017e 184B     		ldr	r3, .L92+4
 1200 0180 5B68     		ldr	r3, [r3, #4]
 1201 0182 23F4E062 		bic	r2, r3, #1792
 1202 0186 7B68     		ldr	r3, [r7, #4]
 1203 0188 DB68     		ldr	r3, [r3, #12]
 1204 018a 1343     		orrs	r3, r3, r2
 1205 018c 4B60     		str	r3, [r1, #4]
 1206              	.L90:
 934:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 935:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 936:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /*-------------------------- PCLK2 Configuration ---------------------------*/ 
 937:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 1207              		.loc 1 937 0
 1208 018e 7B68     		ldr	r3, [r7, #4]
 1209 0190 1B68     		ldr	r3, [r3]
 1210 0192 03F00803 		and	r3, r3, #8
 1211 0196 002B     		cmp	r3, #0
 1212 0198 09D0     		beq	.L91
 938:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
ARM GAS  /tmp/ccxUz4Br.s 			page 39


 939:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 940:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 1213              		.loc 1 940 0
 1214 019a 1149     		ldr	r1, .L92+4
 1215 019c 104B     		ldr	r3, .L92+4
 1216 019e 5B68     		ldr	r3, [r3, #4]
 1217 01a0 23F46052 		bic	r2, r3, #14336
 1218 01a4 7B68     		ldr	r3, [r7, #4]
 1219 01a6 1B69     		ldr	r3, [r3, #16]
 1220 01a8 DB00     		lsls	r3, r3, #3
 1221 01aa 1343     		orrs	r3, r3, r2
 1222 01ac 4B60     		str	r3, [r1, #4]
 1223              	.L91:
 941:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
 942:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****  
 943:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Update the SystemCoreClock global variable */
 944:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CF
 1224              		.loc 1 944 0
 1225 01ae FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 1226 01b2 0146     		mov	r1, r0
 1227 01b4 0A4B     		ldr	r3, .L92+4
 1228 01b6 5B68     		ldr	r3, [r3, #4]
 1229 01b8 03F0F003 		and	r3, r3, #240
 1230 01bc 1B09     		lsrs	r3, r3, #4
 1231 01be 094A     		ldr	r2, .L92+8
 1232 01c0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1233 01c2 21FA03F3 		lsr	r3, r1, r3
 1234 01c6 084A     		ldr	r2, .L92+12
 1235 01c8 1360     		str	r3, [r2]
 945:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 946:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Configure the source of time base considering new system clocks settings*/
 947:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   HAL_InitTick (TICK_INT_PRIORITY);
 1236              		.loc 1 947 0
 1237 01ca 0020     		movs	r0, #0
 1238 01cc FFF7FEFF 		bl	HAL_InitTick
 948:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
 949:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return HAL_OK;
 1239              		.loc 1 949 0
 1240 01d0 0023     		movs	r3, #0
 1241              	.L75:
 950:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1242              		.loc 1 950 0
 1243 01d2 1846     		mov	r0, r3
 1244 01d4 1037     		adds	r7, r7, #16
 1245              	.LCFI13:
 1246              		.cfi_def_cfa_offset 8
 1247 01d6 BD46     		mov	sp, r7
 1248              	.LCFI14:
 1249              		.cfi_def_cfa_register 13
 1250              		@ sp needed
 1251 01d8 80BD     		pop	{r7, pc}
 1252              	.L93:
 1253 01da 00BF     		.align	2
 1254              	.L92:
 1255 01dc 00200240 		.word	1073881088
 1256 01e0 00100240 		.word	1073876992
 1257 01e4 00000000 		.word	AHBPrescTable
ARM GAS  /tmp/ccxUz4Br.s 			page 40


 1258 01e8 00000000 		.word	SystemCoreClock
 1259              		.cfi_endproc
 1260              	.LFE65:
 1262              		.section	.text.HAL_RCC_MCOConfig,"ax",%progbits
 1263              		.align	2
 1264              		.global	HAL_RCC_MCOConfig
 1265              		.thumb
 1266              		.thumb_func
 1268              	HAL_RCC_MCOConfig:
 1269              	.LFB66:
 951:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 952:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 953:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @}
 954:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 955:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 956:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /** @defgroup RCC_Exported_Functions_Group2 Peripheral Control functions
 957:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *  @brief   RCC clocks control functions
 958:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *
 959:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @verbatim   
 960:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ===============================================================================
 961:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                   ##### Peripheral Control functions #####
 962:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   ===============================================================================  
 963:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     [..]
 964:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     This subsection provides a set of functions allowing to control the RCC Clocks 
 965:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     frequencies.
 966:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 967:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @endverbatim
 968:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @{
 969:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
 970:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
 971:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
 972:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
 973:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   MCO pin should be configured in alternate function mode.
 974:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_MCOx specifies the output direction for the clock source.
 975:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 976:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1 Clock source to output on MCO1 pin(PA8).
 977:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_MCOSource specifies the clock source to output.
 978:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 979:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_NOCLOCK     No clock selected as MCO clock
 980:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_SYSCLK      System clock selected as MCO clock
 981:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSI         HSI selected as MCO clock
 982:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_HSE         HSE selected as MCO clock
 983:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @if STM32F105xC
 984:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK       PLL clock divided by 2 selected as MCO source
 985:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL2CLK      PLL2 clock selected as MCO source
 986:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK_DIV2 PLL3 clock divided by 2 selected as MCO source
 987:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_EXT_HSE      XT1 external 3-25 MHz oscillator clock selecte
 988:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK      PLL3 clock selected as MCO source
 989:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @endif
 990:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @if STM32F107xC
 991:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLLCLK       PLL clock divided by 2 selected as MCO source
 992:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL2CLK      PLL2 clock selected as MCO source
 993:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK_DIV2 PLL3 clock divided by 2 selected as MCO source
 994:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_EXT_HSE XT1  external 3-25 MHz oscillator clock selected as
 995:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCO1SOURCE_PLL3CLK      PLL3 clock selected as MCO source
 996:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   @endif
 997:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_MCODiv specifies the MCO DIV.
ARM GAS  /tmp/ccxUz4Br.s 			page 41


 998:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *          This parameter can be one of the following values:
 999:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
1000:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1001:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1002:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
1003:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1270              		.loc 1 1003 0
 1271              		.cfi_startproc
 1272              		@ args = 0, pretend = 0, frame = 40
 1273              		@ frame_needed = 1, uses_anonymous_args = 0
 1274 0000 80B5     		push	{r7, lr}
 1275              	.LCFI15:
 1276              		.cfi_def_cfa_offset 8
 1277              		.cfi_offset 7, -8
 1278              		.cfi_offset 14, -4
 1279 0002 8AB0     		sub	sp, sp, #40
 1280              	.LCFI16:
 1281              		.cfi_def_cfa_offset 48
 1282 0004 00AF     		add	r7, sp, #0
 1283              	.LCFI17:
 1284              		.cfi_def_cfa_register 7
 1285 0006 F860     		str	r0, [r7, #12]
 1286 0008 B960     		str	r1, [r7, #8]
 1287 000a 7A60     		str	r2, [r7, #4]
1004:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   GPIO_InitTypeDef gpio = {0U};
 1288              		.loc 1 1004 0
 1289 000c 07F11803 		add	r3, r7, #24
 1290 0010 0022     		movs	r2, #0
 1291 0012 1A60     		str	r2, [r3]
 1292 0014 0433     		adds	r3, r3, #4
 1293 0016 0022     		movs	r2, #0
 1294 0018 1A60     		str	r2, [r3]
 1295 001a 0433     		adds	r3, r3, #4
 1296 001c 0022     		movs	r2, #0
 1297 001e 1A60     		str	r2, [r3]
 1298 0020 0433     		adds	r3, r3, #4
 1299 0022 0022     		movs	r2, #0
 1300 0024 1A60     		str	r2, [r3]
 1301 0026 0433     		adds	r3, r3, #4
1005:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1006:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
1007:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCOx));
1008:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_MCODIV(RCC_MCODiv));
1009:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
1010:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1011:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Prevent unused argument(s) compilation warning */
1012:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   UNUSED(RCC_MCOx);
1013:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   UNUSED(RCC_MCODiv);
1014:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1015:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Configure the MCO1 pin in alternate function mode */
1016:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   gpio.Mode      = GPIO_MODE_AF_PP;
 1302              		.loc 1 1016 0
 1303 0028 0223     		movs	r3, #2
 1304 002a FB61     		str	r3, [r7, #28]
1017:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 1305              		.loc 1 1017 0
 1306 002c 0323     		movs	r3, #3
ARM GAS  /tmp/ccxUz4Br.s 			page 42


 1307 002e 7B62     		str	r3, [r7, #36]
1018:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   gpio.Pull      = GPIO_NOPULL;
 1308              		.loc 1 1018 0
 1309 0030 0023     		movs	r3, #0
 1310 0032 3B62     		str	r3, [r7, #32]
1019:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   gpio.Pin       = MCO1_PIN;
 1311              		.loc 1 1019 0
 1312 0034 4FF48073 		mov	r3, #256
 1313 0038 BB61     		str	r3, [r7, #24]
 1314              	.LBB6:
1020:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1021:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* MCO1 Clock Enable */
1022:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   MCO1_CLK_ENABLE();
 1315              		.loc 1 1022 0
 1316 003a 0E4A     		ldr	r2, .L95
 1317 003c 0D4B     		ldr	r3, .L95
 1318 003e 9B69     		ldr	r3, [r3, #24]
 1319 0040 43F00403 		orr	r3, r3, #4
 1320 0044 9361     		str	r3, [r2, #24]
 1321 0046 0B4B     		ldr	r3, .L95
 1322 0048 9B69     		ldr	r3, [r3, #24]
 1323 004a 03F00403 		and	r3, r3, #4
 1324 004e 7B61     		str	r3, [r7, #20]
 1325 0050 7B69     		ldr	r3, [r7, #20]
 1326              	.LBE6:
1023:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1024:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 1327              		.loc 1 1024 0
 1328 0052 07F11803 		add	r3, r7, #24
 1329 0056 0848     		ldr	r0, .L95+4
 1330 0058 1946     		mov	r1, r3
 1331 005a FFF7FEFF 		bl	HAL_GPIO_Init
1025:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1026:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Configure the MCO clock source */
1027:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 1332              		.loc 1 1027 0
 1333 005e 0549     		ldr	r1, .L95
 1334 0060 044B     		ldr	r3, .L95
 1335 0062 5B68     		ldr	r3, [r3, #4]
 1336 0064 23F0E062 		bic	r2, r3, #117440512
 1337 0068 BB68     		ldr	r3, [r7, #8]
 1338 006a 1343     		orrs	r3, r3, r2
 1339 006c 4B60     		str	r3, [r1, #4]
1028:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1340              		.loc 1 1028 0
 1341 006e 2837     		adds	r7, r7, #40
 1342              	.LCFI18:
 1343              		.cfi_def_cfa_offset 8
 1344 0070 BD46     		mov	sp, r7
 1345              	.LCFI19:
 1346              		.cfi_def_cfa_register 13
 1347              		@ sp needed
 1348 0072 80BD     		pop	{r7, pc}
 1349              	.L96:
 1350              		.align	2
 1351              	.L95:
 1352 0074 00100240 		.word	1073876992
ARM GAS  /tmp/ccxUz4Br.s 			page 43


 1353 0078 00080140 		.word	1073809408
 1354              		.cfi_endproc
 1355              	.LFE66:
 1357              		.section	.text.HAL_RCC_EnableCSS,"ax",%progbits
 1358              		.align	2
 1359              		.global	HAL_RCC_EnableCSS
 1360              		.thumb
 1361              		.thumb_func
 1363              	HAL_RCC_EnableCSS:
 1364              	.LFB67:
1029:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1030:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1031:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Enables the Clock Security System.
1032:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
1033:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
1034:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
1035:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
1036:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.  
1037:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1038:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1039:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_EnableCSS(void)
1040:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1365              		.loc 1 1040 0
 1366              		.cfi_startproc
 1367              		@ args = 0, pretend = 0, frame = 0
 1368              		@ frame_needed = 1, uses_anonymous_args = 0
 1369              		@ link register save eliminated.
 1370 0000 80B4     		push	{r7}
 1371              	.LCFI20:
 1372              		.cfi_def_cfa_offset 4
 1373              		.cfi_offset 7, -4
 1374 0002 00AF     		add	r7, sp, #0
 1375              	.LCFI21:
 1376              		.cfi_def_cfa_register 7
1041:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 1377              		.loc 1 1041 0
 1378 0004 034B     		ldr	r3, .L98
 1379 0006 0122     		movs	r2, #1
 1380 0008 1A60     		str	r2, [r3]
1042:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1381              		.loc 1 1042 0
 1382 000a BD46     		mov	sp, r7
 1383              	.LCFI22:
 1384              		.cfi_def_cfa_register 13
 1385              		@ sp needed
 1386 000c 5DF8047B 		ldr	r7, [sp], #4
 1387              	.LCFI23:
 1388              		.cfi_restore 7
 1389              		.cfi_def_cfa_offset 0
 1390 0010 7047     		bx	lr
 1391              	.L99:
 1392 0012 00BF     		.align	2
 1393              	.L98:
 1394 0014 4C004242 		.word	1111621708
 1395              		.cfi_endproc
 1396              	.LFE67:
 1398              		.section	.text.HAL_RCC_DisableCSS,"ax",%progbits
ARM GAS  /tmp/ccxUz4Br.s 			page 44


 1399              		.align	2
 1400              		.global	HAL_RCC_DisableCSS
 1401              		.thumb
 1402              		.thumb_func
 1404              	HAL_RCC_DisableCSS:
 1405              	.LFB68:
1043:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1044:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1045:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Disables the Clock Security System.
1046:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1047:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1048:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_DisableCSS(void)
1049:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1406              		.loc 1 1049 0
 1407              		.cfi_startproc
 1408              		@ args = 0, pretend = 0, frame = 0
 1409              		@ frame_needed = 1, uses_anonymous_args = 0
 1410              		@ link register save eliminated.
 1411 0000 80B4     		push	{r7}
 1412              	.LCFI24:
 1413              		.cfi_def_cfa_offset 4
 1414              		.cfi_offset 7, -4
 1415 0002 00AF     		add	r7, sp, #0
 1416              	.LCFI25:
 1417              		.cfi_def_cfa_register 7
1050:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 1418              		.loc 1 1050 0
 1419 0004 034B     		ldr	r3, .L101
 1420 0006 0022     		movs	r2, #0
 1421 0008 1A60     		str	r2, [r3]
1051:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1422              		.loc 1 1051 0
 1423 000a BD46     		mov	sp, r7
 1424              	.LCFI26:
 1425              		.cfi_def_cfa_register 13
 1426              		@ sp needed
 1427 000c 5DF8047B 		ldr	r7, [sp], #4
 1428              	.LCFI27:
 1429              		.cfi_restore 7
 1430              		.cfi_def_cfa_offset 0
 1431 0010 7047     		bx	lr
 1432              	.L102:
 1433 0012 00BF     		.align	2
 1434              	.L101:
 1435 0014 4C004242 		.word	1111621708
 1436              		.cfi_endproc
 1437              	.LFE68:
 1439              		.section	.rodata
 1440              		.align	2
 1441              	.LC0:
 1442 0000 02       		.byte	2
 1443 0001 03       		.byte	3
 1444 0002 04       		.byte	4
 1445 0003 05       		.byte	5
 1446 0004 06       		.byte	6
 1447 0005 07       		.byte	7
 1448 0006 08       		.byte	8
ARM GAS  /tmp/ccxUz4Br.s 			page 45


 1449 0007 09       		.byte	9
 1450 0008 0A       		.byte	10
 1451 0009 0B       		.byte	11
 1452 000a 0C       		.byte	12
 1453 000b 0D       		.byte	13
 1454 000c 0E       		.byte	14
 1455 000d 0F       		.byte	15
 1456 000e 10       		.byte	16
 1457 000f 10       		.byte	16
 1458              		.align	2
 1459              	.LC1:
 1460 0010 01       		.byte	1
 1461 0011 02       		.byte	2
 1462              		.section	.text.HAL_RCC_GetSysClockFreq,"ax",%progbits
 1463              		.align	2
 1464              		.global	HAL_RCC_GetSysClockFreq
 1465              		.thumb
 1466              		.thumb_func
 1468              	HAL_RCC_GetSysClockFreq:
 1469              	.LFB69:
1052:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1053:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1054:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Returns the SYSCLK frequency     
1055:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The system frequency computed by this function is not the real 
1056:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
1057:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         constant and the selected clock source:
1058:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
1059:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note     If SYSCLK source is HSE, function returns a value based on HSE_VALUE
1060:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           divided by PREDIV factor(**)
1061:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note     If SYSCLK source is PLL, function returns a value based on HSE_VALUE
1062:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           divided by PREDIV factor(**) or HSI_VALUE(*) multiplied by the PLL factor.
1063:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f1xx_hal_conf.h file (default value
1064:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *               8 MHz) but the real value may vary depending on the variations
1065:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *               in voltage and temperature.
1066:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f1xx_hal_conf.h file (default value
1067:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *                8 MHz), user has to ensure that HSE_VALUE is same as the real
1068:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1069:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *                have wrong result.
1070:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *                  
1071:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1072:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         value for HSE crystal.
1073:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           
1074:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   This function can be used by the user application to compute the 
1075:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         baud-rate for the communication peripherals or configure other parameters.
1076:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *           
1077:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Each time SYSCLK changes, this function must be called to update the
1078:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         right SYSCLK value. Otherwise, any configuration based on this function will be incorre
1079:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         
1080:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval SYSCLK frequency
1081:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1082:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetSysClockFreq(void)
1083:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1470              		.loc 1 1083 0
 1471              		.cfi_startproc
 1472              		@ args = 0, pretend = 0, frame = 40
 1473              		@ frame_needed = 1, uses_anonymous_args = 0
 1474              		@ link register save eliminated.
ARM GAS  /tmp/ccxUz4Br.s 			page 46


 1475 0000 90B4     		push	{r4, r7}
 1476              	.LCFI28:
 1477              		.cfi_def_cfa_offset 8
 1478              		.cfi_offset 4, -8
 1479              		.cfi_offset 7, -4
 1480 0002 8AB0     		sub	sp, sp, #40
 1481              	.LCFI29:
 1482              		.cfi_def_cfa_offset 48
 1483 0004 00AF     		add	r7, sp, #0
 1484              	.LCFI30:
 1485              		.cfi_def_cfa_register 7
1084:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1085:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
1086:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
1087:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #else
1088:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 1486              		.loc 1 1088 0
 1487 0006 2B4B     		ldr	r3, .L112
 1488 0008 3C1D     		adds	r4, r7, #4
 1489 000a 1868     		ldr	r0, [r3]	@ unaligned
 1490 000c 5968     		ldr	r1, [r3, #4]	@ unaligned
 1491 000e 9A68     		ldr	r2, [r3, #8]	@ unaligned
 1492 0010 DB68     		ldr	r3, [r3, #12]	@ unaligned
 1493 0012 0FC4     		stmia	r4!, {r0, r1, r2, r3}
1089:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
1090:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
1091:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #else
1092:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   const uint8_t aPredivFactorTable[2] = {1, 2};
 1494              		.loc 1 1092 0
 1495 0014 284A     		ldr	r2, .L112+4
 1496 0016 3B46     		mov	r3, r7
 1497 0018 1288     		ldrh	r2, [r2]	@ unaligned
 1498 001a 1A80     		strh	r2, [r3]	@ unaligned
1093:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
1094:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1095:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif
1096:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 1499              		.loc 1 1096 0
 1500 001c 0023     		movs	r3, #0
 1501 001e FB61     		str	r3, [r7, #28]
 1502 0020 0023     		movs	r3, #0
 1503 0022 BB61     		str	r3, [r7, #24]
 1504 0024 0023     		movs	r3, #0
 1505 0026 7B62     		str	r3, [r7, #36]
 1506 0028 0023     		movs	r3, #0
 1507 002a 7B61     		str	r3, [r7, #20]
1097:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t sysclockfreq = 0U;
 1508              		.loc 1 1097 0
 1509 002c 0023     		movs	r3, #0
 1510 002e 3B62     		str	r3, [r7, #32]
1098:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1099:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   uint32_t prediv2 = 0U, pll2mul = 0U;
1100:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1SRC*/
1101:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1102:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   tmpreg = RCC->CFGR;
 1511              		.loc 1 1102 0
 1512 0030 224B     		ldr	r3, .L112+8
ARM GAS  /tmp/ccxUz4Br.s 			page 47


 1513 0032 5B68     		ldr	r3, [r3, #4]
 1514 0034 FB61     		str	r3, [r7, #28]
1103:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1104:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1105:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   switch (tmpreg & RCC_CFGR_SWS)
 1515              		.loc 1 1105 0
 1516 0036 FB69     		ldr	r3, [r7, #28]
 1517 0038 03F00C03 		and	r3, r3, #12
 1518 003c 042B     		cmp	r3, #4
 1519 003e 02D0     		beq	.L105
 1520 0040 082B     		cmp	r3, #8
 1521 0042 03D0     		beq	.L106
 1522 0044 2DE0     		b	.L111
 1523              	.L105:
1106:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1107:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
1108:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
1109:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       sysclockfreq = HSE_VALUE;
 1524              		.loc 1 1109 0
 1525 0046 1E4B     		ldr	r3, .L112+12
 1526 0048 3B62     		str	r3, [r7, #32]
1110:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       break;
 1527              		.loc 1 1110 0
 1528 004a 2DE0     		b	.L107
 1529              	.L106:
1111:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
1112:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
1113:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
1114:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 1530              		.loc 1 1114 0
 1531 004c FB69     		ldr	r3, [r7, #28]
 1532 004e 03F47013 		and	r3, r3, #3932160
 1533 0052 9B0C     		lsrs	r3, r3, #18
 1534 0054 07F12802 		add	r2, r7, #40
 1535 0058 1344     		add	r3, r3, r2
 1536 005a 13F8243C 		ldrb	r3, [r3, #-36]	@ zero_extendqisi2
 1537 005e 7B61     		str	r3, [r7, #20]
1115:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 1538              		.loc 1 1115 0
 1539 0060 FB69     		ldr	r3, [r7, #28]
 1540 0062 03F48033 		and	r3, r3, #65536
 1541 0066 002B     		cmp	r3, #0
 1542 0068 13D0     		beq	.L108
1116:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
1117:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1)
1118:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1
1119:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #else
1120:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_
 1543              		.loc 1 1120 0
 1544 006a 144B     		ldr	r3, .L112+8
 1545 006c 5B68     		ldr	r3, [r3, #4]
 1546 006e 03F40033 		and	r3, r3, #131072
 1547 0072 5B0C     		lsrs	r3, r3, #17
 1548 0074 07F12802 		add	r2, r7, #40
 1549 0078 1344     		add	r3, r3, r2
 1550 007a 13F8283C 		ldrb	r3, [r3, #-40]	@ zero_extendqisi2
 1551 007e BB61     		str	r3, [r7, #24]
ARM GAS  /tmp/ccxUz4Br.s 			page 48


1121:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1*/
1122:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1123:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1124:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
1125:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
1126:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* PLL2 selected as Prediv1 source */
1127:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
1128:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
1129:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
1130:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint
1131:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
1132:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         else
1133:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
1134:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
1135:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****           pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
1136:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
1137:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1138:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using floa
1139:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* In this case need to divide pllclk by 2 */
1140:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
1141:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         {
1142:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****             pllclk = pllclk / 2;
1143:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         }
1144:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #else
1145:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
1146:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 1552              		.loc 1 1146 0
 1553 0080 7B69     		ldr	r3, [r7, #20]
 1554 0082 0F4A     		ldr	r2, .L112+12
 1555 0084 02FB03F2 		mul	r2, r2, r3
 1556 0088 BB69     		ldr	r3, [r7, #24]
 1557 008a B2FBF3F3 		udiv	r3, r2, r3
 1558 008e 7B62     		str	r3, [r7, #36]
 1559 0090 04E0     		b	.L109
 1560              	.L108:
1147:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /*RCC_CFGR2_PREDIV1SRC*/
1148:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
1149:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       else
1150:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       {
1151:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
1152:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****         pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 1561              		.loc 1 1152 0
 1562 0092 7B69     		ldr	r3, [r7, #20]
 1563 0094 0B4A     		ldr	r2, .L112+16
 1564 0096 02FB03F3 		mul	r3, r2, r3
 1565 009a 7B62     		str	r3, [r7, #36]
 1566              	.L109:
1153:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       }
1154:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       sysclockfreq = pllclk;
 1567              		.loc 1 1154 0
 1568 009c 7B6A     		ldr	r3, [r7, #36]
 1569 009e 3B62     		str	r3, [r7, #32]
1155:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       break;
 1570              		.loc 1 1155 0
 1571 00a0 02E0     		b	.L107
 1572              	.L111:
1156:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
ARM GAS  /tmp/ccxUz4Br.s 			page 49


1157:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
1158:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     default: /* HSI used as system clock */
1159:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     {
1160:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       sysclockfreq = HSI_VALUE;
 1573              		.loc 1 1160 0
 1574 00a2 074B     		ldr	r3, .L112+12
 1575 00a4 3B62     		str	r3, [r7, #32]
1161:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****       break;
 1576              		.loc 1 1161 0
 1577 00a6 00BF     		nop
 1578              	.L107:
1162:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     }
1163:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1164:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return sysclockfreq;
 1579              		.loc 1 1164 0
 1580 00a8 3B6A     		ldr	r3, [r7, #32]
1165:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1581              		.loc 1 1165 0
 1582 00aa 1846     		mov	r0, r3
 1583 00ac 2837     		adds	r7, r7, #40
 1584              	.LCFI31:
 1585              		.cfi_def_cfa_offset 8
 1586 00ae BD46     		mov	sp, r7
 1587              	.LCFI32:
 1588              		.cfi_def_cfa_register 13
 1589              		@ sp needed
 1590 00b0 90BC     		pop	{r4, r7}
 1591              	.LCFI33:
 1592              		.cfi_restore 7
 1593              		.cfi_restore 4
 1594              		.cfi_def_cfa_offset 0
 1595 00b2 7047     		bx	lr
 1596              	.L113:
 1597              		.align	2
 1598              	.L112:
 1599 00b4 00000000 		.word	.LC0
 1600 00b8 10000000 		.word	.LC1
 1601 00bc 00100240 		.word	1073876992
 1602 00c0 00127A00 		.word	8000000
 1603 00c4 00093D00 		.word	4000000
 1604              		.cfi_endproc
 1605              	.LFE69:
 1607              		.section	.text.HAL_RCC_GetHCLKFreq,"ax",%progbits
 1608              		.align	2
 1609              		.global	HAL_RCC_GetHCLKFreq
 1610              		.thumb
 1611              		.thumb_func
 1613              	HAL_RCC_GetHCLKFreq:
 1614              	.LFB70:
1166:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1167:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1168:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Returns the HCLK frequency     
1169:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Each time HCLK changes, this function must be called to update the
1170:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         right HCLK value. Otherwise, any configuration based on this function will be incorrect
1171:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * 
1172:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
1173:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         and updated within this function
ARM GAS  /tmp/ccxUz4Br.s 			page 50


1174:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval HCLK frequency
1175:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1176:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetHCLKFreq(void)
1177:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1615              		.loc 1 1177 0
 1616              		.cfi_startproc
 1617              		@ args = 0, pretend = 0, frame = 0
 1618              		@ frame_needed = 1, uses_anonymous_args = 0
 1619              		@ link register save eliminated.
 1620 0000 80B4     		push	{r7}
 1621              	.LCFI34:
 1622              		.cfi_def_cfa_offset 4
 1623              		.cfi_offset 7, -4
 1624 0002 00AF     		add	r7, sp, #0
 1625              	.LCFI35:
 1626              		.cfi_def_cfa_register 7
1178:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return SystemCoreClock;
 1627              		.loc 1 1178 0
 1628 0004 034B     		ldr	r3, .L116
 1629 0006 1B68     		ldr	r3, [r3]
1179:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1630              		.loc 1 1179 0
 1631 0008 1846     		mov	r0, r3
 1632 000a BD46     		mov	sp, r7
 1633              	.LCFI36:
 1634              		.cfi_def_cfa_register 13
 1635              		@ sp needed
 1636 000c 5DF8047B 		ldr	r7, [sp], #4
 1637              	.LCFI37:
 1638              		.cfi_restore 7
 1639              		.cfi_def_cfa_offset 0
 1640 0010 7047     		bx	lr
 1641              	.L117:
 1642 0012 00BF     		.align	2
 1643              	.L116:
 1644 0014 00000000 		.word	SystemCoreClock
 1645              		.cfi_endproc
 1646              	.LFE70:
 1648              		.section	.text.HAL_RCC_GetPCLK1Freq,"ax",%progbits
 1649              		.align	2
 1650              		.global	HAL_RCC_GetPCLK1Freq
 1651              		.thumb
 1652              		.thumb_func
 1654              	HAL_RCC_GetPCLK1Freq:
 1655              	.LFB71:
1180:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1181:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1182:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Returns the PCLK1 frequency     
1183:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Each time PCLK1 changes, this function must be called to update the
1184:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrec
1185:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval PCLK1 frequency
1186:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1187:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK1Freq(void)
1188:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1656              		.loc 1 1188 0
 1657              		.cfi_startproc
 1658              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccxUz4Br.s 			page 51


 1659              		@ frame_needed = 1, uses_anonymous_args = 0
 1660 0000 80B5     		push	{r7, lr}
 1661              	.LCFI38:
 1662              		.cfi_def_cfa_offset 8
 1663              		.cfi_offset 7, -8
 1664              		.cfi_offset 14, -4
 1665 0002 00AF     		add	r7, sp, #0
 1666              	.LCFI39:
 1667              		.cfi_def_cfa_register 7
1189:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
1190:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos
 1668              		.loc 1 1190 0
 1669 0004 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1670 0008 0146     		mov	r1, r0
 1671 000a 054B     		ldr	r3, .L120
 1672 000c 5B68     		ldr	r3, [r3, #4]
 1673 000e 03F4E063 		and	r3, r3, #1792
 1674 0012 1B0A     		lsrs	r3, r3, #8
 1675 0014 034A     		ldr	r2, .L120+4
 1676 0016 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1677 0018 21FA03F3 		lsr	r3, r1, r3
1191:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }    
 1678              		.loc 1 1191 0
 1679 001c 1846     		mov	r0, r3
 1680 001e 80BD     		pop	{r7, pc}
 1681              	.L121:
 1682              		.align	2
 1683              	.L120:
 1684 0020 00100240 		.word	1073876992
 1685 0024 00000000 		.word	APBPrescTable
 1686              		.cfi_endproc
 1687              	.LFE71:
 1689              		.section	.text.HAL_RCC_GetPCLK2Freq,"ax",%progbits
 1690              		.align	2
 1691              		.global	HAL_RCC_GetPCLK2Freq
 1692              		.thumb
 1693              		.thumb_func
 1695              	HAL_RCC_GetPCLK2Freq:
 1696              	.LFB72:
1192:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1193:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1194:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Returns the PCLK2 frequency     
1195:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note   Each time PCLK2 changes, this function must be called to update the
1196:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrec
1197:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval PCLK2 frequency
1198:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1199:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** uint32_t HAL_RCC_GetPCLK2Freq(void)
1200:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1697              		.loc 1 1200 0
 1698              		.cfi_startproc
 1699              		@ args = 0, pretend = 0, frame = 0
 1700              		@ frame_needed = 1, uses_anonymous_args = 0
 1701 0000 80B5     		push	{r7, lr}
 1702              	.LCFI40:
 1703              		.cfi_def_cfa_offset 8
 1704              		.cfi_offset 7, -8
 1705              		.cfi_offset 14, -4
ARM GAS  /tmp/ccxUz4Br.s 			page 52


 1706 0002 00AF     		add	r7, sp, #0
 1707              	.LCFI41:
 1708              		.cfi_def_cfa_register 7
1201:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
1202:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]
 1709              		.loc 1 1202 0
 1710 0004 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 1711 0008 0146     		mov	r1, r0
 1712 000a 054B     		ldr	r3, .L124
 1713 000c 5B68     		ldr	r3, [r3, #4]
 1714 000e 03F46053 		and	r3, r3, #14336
 1715 0012 DB0A     		lsrs	r3, r3, #11
 1716 0014 034A     		ldr	r2, .L124+4
 1717 0016 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1718 0018 21FA03F3 		lsr	r3, r1, r3
1203:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** } 
 1719              		.loc 1 1203 0
 1720 001c 1846     		mov	r0, r3
 1721 001e 80BD     		pop	{r7, pc}
 1722              	.L125:
 1723              		.align	2
 1724              	.L124:
 1725 0020 00100240 		.word	1073876992
 1726 0024 00000000 		.word	APBPrescTable
 1727              		.cfi_endproc
 1728              	.LFE72:
 1730              		.section	.text.HAL_RCC_GetOscConfig,"ax",%progbits
 1731              		.align	2
 1732              		.global	HAL_RCC_GetOscConfig
 1733              		.thumb
 1734              		.thumb_func
 1736              	HAL_RCC_GetOscConfig:
 1737              	.LFB73:
1204:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1205:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1206:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Configures the RCC_OscInitStruct according to the internal 
1207:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * RCC configuration registers.
1208:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that 
1209:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * will be configured.
1210:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1211:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1212:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
1213:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1738              		.loc 1 1213 0
 1739              		.cfi_startproc
 1740              		@ args = 0, pretend = 0, frame = 8
 1741              		@ frame_needed = 1, uses_anonymous_args = 0
 1742              		@ link register save eliminated.
 1743 0000 80B4     		push	{r7}
 1744              	.LCFI42:
 1745              		.cfi_def_cfa_offset 4
 1746              		.cfi_offset 7, -4
 1747 0002 83B0     		sub	sp, sp, #12
 1748              	.LCFI43:
 1749              		.cfi_def_cfa_offset 16
 1750 0004 00AF     		add	r7, sp, #0
 1751              	.LCFI44:
ARM GAS  /tmp/ccxUz4Br.s 			page 53


 1752              		.cfi_def_cfa_register 7
 1753 0006 7860     		str	r0, [r7, #4]
1214:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
1215:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(RCC_OscInitStruct != NULL);
1216:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1217:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Set all possible values for the Oscillator type parameter ---------------*/
1218:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 1754              		.loc 1 1218 0
 1755 0008 7B68     		ldr	r3, [r7, #4]
 1756 000a 0F22     		movs	r2, #15
 1757 000c 1A60     		str	r2, [r3]
1219:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****                   | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
1220:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1221:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CFGR2_PREDIV1SRC)
1222:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the Prediv1 source --------------------------------------------------*/
1223:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->Prediv1Source = READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC);
1224:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CFGR2_PREDIV1SRC */
1225:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1226:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the HSE configuration -----------------------------------------------*/
1227:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 1758              		.loc 1 1227 0
 1759 000e 3A4B     		ldr	r3, .L139
 1760 0010 1B68     		ldr	r3, [r3]
 1761 0012 03F48023 		and	r3, r3, #262144
 1762 0016 002B     		cmp	r3, #0
 1763 0018 04D0     		beq	.L127
1228:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1229:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 1764              		.loc 1 1229 0
 1765 001a 7B68     		ldr	r3, [r7, #4]
 1766 001c 4FF4A022 		mov	r2, #327680
 1767 0020 5A60     		str	r2, [r3, #4]
 1768 0022 0DE0     		b	.L128
 1769              	.L127:
1230:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1231:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 1770              		.loc 1 1231 0
 1771 0024 344B     		ldr	r3, .L139
 1772 0026 1B68     		ldr	r3, [r3]
 1773 0028 03F48033 		and	r3, r3, #65536
 1774 002c 002B     		cmp	r3, #0
 1775 002e 04D0     		beq	.L129
1232:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1233:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 1776              		.loc 1 1233 0
 1777 0030 7B68     		ldr	r3, [r7, #4]
 1778 0032 4FF48032 		mov	r2, #65536
 1779 0036 5A60     		str	r2, [r3, #4]
 1780 0038 02E0     		b	.L128
 1781              	.L129:
1234:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1235:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1236:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1237:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 1782              		.loc 1 1237 0
 1783 003a 7B68     		ldr	r3, [r7, #4]
 1784 003c 0022     		movs	r2, #0
ARM GAS  /tmp/ccxUz4Br.s 			page 54


 1785 003e 5A60     		str	r2, [r3, #4]
 1786              	.L128:
1238:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1239:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
 1787              		.loc 1 1239 0
 1788 0040 2D4B     		ldr	r3, .L139
 1789 0042 5B68     		ldr	r3, [r3, #4]
 1790 0044 03F40032 		and	r2, r3, #131072
 1791 0048 7B68     		ldr	r3, [r7, #4]
 1792 004a 9A60     		str	r2, [r3, #8]
1240:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1241:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the HSI configuration -----------------------------------------------*/
1242:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 1793              		.loc 1 1242 0
 1794 004c 2A4B     		ldr	r3, .L139
 1795 004e 1B68     		ldr	r3, [r3]
 1796 0050 03F00103 		and	r3, r3, #1
 1797 0054 002B     		cmp	r3, #0
 1798 0056 03D0     		beq	.L130
1243:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1244:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 1799              		.loc 1 1244 0
 1800 0058 7B68     		ldr	r3, [r7, #4]
 1801 005a 0122     		movs	r2, #1
 1802 005c 1A61     		str	r2, [r3, #16]
 1803 005e 02E0     		b	.L131
 1804              	.L130:
1245:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1246:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1247:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1248:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 1805              		.loc 1 1248 0
 1806 0060 7B68     		ldr	r3, [r7, #4]
 1807 0062 0022     		movs	r2, #0
 1808 0064 1A61     		str	r2, [r3, #16]
 1809              	.L131:
1249:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1250:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1251:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_
 1810              		.loc 1 1251 0
 1811 0066 244B     		ldr	r3, .L139
 1812 0068 1B68     		ldr	r3, [r3]
 1813 006a 03F0F803 		and	r3, r3, #248
 1814 006e DA08     		lsrs	r2, r3, #3
 1815 0070 7B68     		ldr	r3, [r7, #4]
 1816 0072 5A61     		str	r2, [r3, #20]
1252:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1253:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the LSE configuration -----------------------------------------------*/
1254:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 1817              		.loc 1 1254 0
 1818 0074 204B     		ldr	r3, .L139
 1819 0076 1B6A     		ldr	r3, [r3, #32]
 1820 0078 03F00403 		and	r3, r3, #4
 1821 007c 002B     		cmp	r3, #0
 1822 007e 03D0     		beq	.L132
1255:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1256:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
ARM GAS  /tmp/ccxUz4Br.s 			page 55


 1823              		.loc 1 1256 0
 1824 0080 7B68     		ldr	r3, [r7, #4]
 1825 0082 0522     		movs	r2, #5
 1826 0084 DA60     		str	r2, [r3, #12]
 1827 0086 0CE0     		b	.L133
 1828              	.L132:
1257:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1258:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 1829              		.loc 1 1258 0
 1830 0088 1B4B     		ldr	r3, .L139
 1831 008a 1B6A     		ldr	r3, [r3, #32]
 1832 008c 03F00103 		and	r3, r3, #1
 1833 0090 002B     		cmp	r3, #0
 1834 0092 03D0     		beq	.L134
1259:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1260:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 1835              		.loc 1 1260 0
 1836 0094 7B68     		ldr	r3, [r7, #4]
 1837 0096 0122     		movs	r2, #1
 1838 0098 DA60     		str	r2, [r3, #12]
 1839 009a 02E0     		b	.L133
 1840              	.L134:
1261:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1262:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1263:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1264:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 1841              		.loc 1 1264 0
 1842 009c 7B68     		ldr	r3, [r7, #4]
 1843 009e 0022     		movs	r2, #0
 1844 00a0 DA60     		str	r2, [r3, #12]
 1845              	.L133:
1265:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1266:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1267:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the LSI configuration -----------------------------------------------*/
1268:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 1846              		.loc 1 1268 0
 1847 00a2 154B     		ldr	r3, .L139
 1848 00a4 5B6A     		ldr	r3, [r3, #36]
 1849 00a6 03F00103 		and	r3, r3, #1
 1850 00aa 002B     		cmp	r3, #0
 1851 00ac 03D0     		beq	.L135
1269:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1270:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 1852              		.loc 1 1270 0
 1853 00ae 7B68     		ldr	r3, [r7, #4]
 1854 00b0 0122     		movs	r2, #1
 1855 00b2 9A61     		str	r2, [r3, #24]
 1856 00b4 02E0     		b	.L136
 1857              	.L135:
1271:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1272:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1273:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1274:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 1858              		.loc 1 1274 0
 1859 00b6 7B68     		ldr	r3, [r7, #4]
 1860 00b8 0022     		movs	r2, #0
 1861 00ba 9A61     		str	r2, [r3, #24]
ARM GAS  /tmp/ccxUz4Br.s 			page 56


 1862              	.L136:
1275:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1276:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1277:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1278:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the PLL configuration -----------------------------------------------*/
1279:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 1863              		.loc 1 1279 0
 1864 00bc 0E4B     		ldr	r3, .L139
 1865 00be 1B68     		ldr	r3, [r3]
 1866 00c0 03F08073 		and	r3, r3, #16777216
 1867 00c4 002B     		cmp	r3, #0
 1868 00c6 03D0     		beq	.L137
1280:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1281:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 1869              		.loc 1 1281 0
 1870 00c8 7B68     		ldr	r3, [r7, #4]
 1871 00ca 0222     		movs	r2, #2
 1872 00cc DA61     		str	r2, [r3, #28]
 1873 00ce 02E0     		b	.L138
 1874              	.L137:
1282:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1283:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1284:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1285:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 1875              		.loc 1 1285 0
 1876 00d0 7B68     		ldr	r3, [r7, #4]
 1877 00d2 0122     		movs	r2, #1
 1878 00d4 DA61     		str	r2, [r3, #28]
 1879              	.L138:
1286:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1287:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 1880              		.loc 1 1287 0
 1881 00d6 084B     		ldr	r3, .L139
 1882 00d8 5B68     		ldr	r3, [r3, #4]
 1883 00da 03F48032 		and	r2, r3, #65536
 1884 00de 7B68     		ldr	r3, [r7, #4]
 1885 00e0 1A62     		str	r2, [r3, #32]
1288:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
 1886              		.loc 1 1288 0
 1887 00e2 054B     		ldr	r3, .L139
 1888 00e4 5B68     		ldr	r3, [r3, #4]
 1889 00e6 03F47012 		and	r2, r3, #3932160
 1890 00ea 7B68     		ldr	r3, [r7, #4]
 1891 00ec 5A62     		str	r2, [r3, #36]
1289:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if defined(RCC_CR_PLL2ON)
1290:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the PLL2 configuration -----------------------------------------------*/
1291:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if((RCC->CR &RCC_CR_PLL2ON) == RCC_CR_PLL2ON)
1292:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1293:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_ON;
1294:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1295:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   else
1296:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1297:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_OFF;
1298:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1299:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL2.HSEPrediv2Value = __HAL_RCC_HSE_GET_PREDIV2();
1300:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_OscInitStruct->PLL2.PLL2MUL = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PLL2MUL);
1301:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif /* RCC_CR_PLL2ON */
ARM GAS  /tmp/ccxUz4Br.s 			page 57


1302:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1892              		.loc 1 1302 0
 1893 00ee 0C37     		adds	r7, r7, #12
 1894              	.LCFI45:
 1895              		.cfi_def_cfa_offset 4
 1896 00f0 BD46     		mov	sp, r7
 1897              	.LCFI46:
 1898              		.cfi_def_cfa_register 13
 1899              		@ sp needed
 1900 00f2 5DF8047B 		ldr	r7, [sp], #4
 1901              	.LCFI47:
 1902              		.cfi_restore 7
 1903              		.cfi_def_cfa_offset 0
 1904 00f6 7047     		bx	lr
 1905              	.L140:
 1906              		.align	2
 1907              	.L139:
 1908 00f8 00100240 		.word	1073876992
 1909              		.cfi_endproc
 1910              	.LFE73:
 1912              		.section	.text.HAL_RCC_GetClockConfig,"ax",%progbits
 1913              		.align	2
 1914              		.global	HAL_RCC_GetClockConfig
 1915              		.thumb
 1916              		.thumb_func
 1918              	HAL_RCC_GetClockConfig:
 1919              	.LFB74:
1303:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1304:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1305:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  Get the RCC_ClkInitStruct according to the internal 
1306:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * RCC configuration registers.
1307:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  RCC_ClkInitStruct pointer to an RCC_ClkInitTypeDef structure that 
1308:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * contains the current clock configuration.
1309:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  pFLatency Pointer on the Flash Latency.
1310:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1311:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1312:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
1313:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 1920              		.loc 1 1313 0
 1921              		.cfi_startproc
 1922              		@ args = 0, pretend = 0, frame = 8
 1923              		@ frame_needed = 1, uses_anonymous_args = 0
 1924              		@ link register save eliminated.
 1925 0000 80B4     		push	{r7}
 1926              	.LCFI48:
 1927              		.cfi_def_cfa_offset 4
 1928              		.cfi_offset 7, -4
 1929 0002 83B0     		sub	sp, sp, #12
 1930              	.LCFI49:
 1931              		.cfi_def_cfa_offset 16
 1932 0004 00AF     		add	r7, sp, #0
 1933              	.LCFI50:
 1934              		.cfi_def_cfa_register 7
 1935 0006 7860     		str	r0, [r7, #4]
 1936 0008 3960     		str	r1, [r7]
1314:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check the parameters */
1315:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(RCC_ClkInitStruct != NULL);
ARM GAS  /tmp/ccxUz4Br.s 			page 58


1316:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   assert_param(pFLatency != NULL);
1317:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1318:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Set all possible values for the Clock type parameter --------------------*/
1319:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | 
 1937              		.loc 1 1319 0
 1938 000a 7B68     		ldr	r3, [r7, #4]
 1939 000c 0F22     		movs	r2, #15
 1940 000e 1A60     		str	r2, [r3]
1320:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1321:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the SYSCLK configuration --------------------------------------------*/ 
1322:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 1941              		.loc 1 1322 0
 1942 0010 114B     		ldr	r3, .L142
 1943 0012 5B68     		ldr	r3, [r3, #4]
 1944 0014 03F00302 		and	r2, r3, #3
 1945 0018 7B68     		ldr	r3, [r7, #4]
 1946 001a 5A60     		str	r2, [r3, #4]
1323:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1324:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the HCLK configuration ----------------------------------------------*/ 
1325:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 1947              		.loc 1 1325 0
 1948 001c 0E4B     		ldr	r3, .L142
 1949 001e 5B68     		ldr	r3, [r3, #4]
 1950 0020 03F0F002 		and	r2, r3, #240
 1951 0024 7B68     		ldr	r3, [r7, #4]
 1952 0026 9A60     		str	r2, [r3, #8]
1326:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1327:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the APB1 configuration ----------------------------------------------*/ 
1328:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 1953              		.loc 1 1328 0
 1954 0028 0B4B     		ldr	r3, .L142
 1955 002a 5B68     		ldr	r3, [r3, #4]
 1956 002c 03F4E062 		and	r2, r3, #1792
 1957 0030 7B68     		ldr	r3, [r7, #4]
 1958 0032 DA60     		str	r2, [r3, #12]
1329:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1330:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the APB2 configuration ----------------------------------------------*/ 
1331:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 1959              		.loc 1 1331 0
 1960 0034 084B     		ldr	r3, .L142
 1961 0036 5B68     		ldr	r3, [r3, #4]
 1962 0038 03F46053 		and	r3, r3, #14336
 1963 003c DA08     		lsrs	r2, r3, #3
 1964 003e 7B68     		ldr	r3, [r7, #4]
 1965 0040 1A61     		str	r2, [r3, #16]
1332:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   
1333:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #if   defined(FLASH_ACR_LATENCY)
1334:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Get the Flash Wait State (Latency) configuration ------------------------*/   
1335:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 1966              		.loc 1 1335 0
 1967 0042 064B     		ldr	r3, .L142+4
 1968 0044 1B68     		ldr	r3, [r3]
 1969 0046 03F00702 		and	r2, r3, #7
 1970 004a 3B68     		ldr	r3, [r7]
 1971 004c 1A60     		str	r2, [r3]
1336:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #else
1337:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* For VALUE lines devices, only LATENCY_0 can be set*/
ARM GAS  /tmp/ccxUz4Br.s 			page 59


1338:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   *pFLatency = (uint32_t)FLASH_LATENCY_0; 
1339:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** #endif
1340:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 1972              		.loc 1 1340 0
 1973 004e 0C37     		adds	r7, r7, #12
 1974              	.LCFI51:
 1975              		.cfi_def_cfa_offset 4
 1976 0050 BD46     		mov	sp, r7
 1977              	.LCFI52:
 1978              		.cfi_def_cfa_register 13
 1979              		@ sp needed
 1980 0052 5DF8047B 		ldr	r7, [sp], #4
 1981              	.LCFI53:
 1982              		.cfi_restore 7
 1983              		.cfi_def_cfa_offset 0
 1984 0056 7047     		bx	lr
 1985              	.L143:
 1986              		.align	2
 1987              	.L142:
 1988 0058 00100240 		.word	1073876992
 1989 005c 00200240 		.word	1073881088
 1990              		.cfi_endproc
 1991              	.LFE74:
 1993              		.section	.text.HAL_RCC_NMI_IRQHandler,"ax",%progbits
 1994              		.align	2
 1995              		.global	HAL_RCC_NMI_IRQHandler
 1996              		.thumb
 1997              		.thumb_func
 1999              	HAL_RCC_NMI_IRQHandler:
 2000              	.LFB75:
1341:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1342:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1343:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief This function handles the RCC CSS interrupt request.
1344:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @note This API should be called under the NMI_Handler().
1345:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1346:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1347:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** void HAL_RCC_NMI_IRQHandler(void)
1348:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 2001              		.loc 1 1348 0
 2002              		.cfi_startproc
 2003              		@ args = 0, pretend = 0, frame = 0
 2004              		@ frame_needed = 1, uses_anonymous_args = 0
 2005 0000 80B5     		push	{r7, lr}
 2006              	.LCFI54:
 2007              		.cfi_def_cfa_offset 8
 2008              		.cfi_offset 7, -8
 2009              		.cfi_offset 14, -4
 2010 0002 00AF     		add	r7, sp, #0
 2011              	.LCFI55:
 2012              		.cfi_def_cfa_register 7
1349:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* Check RCC CSSF flag  */
1350:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 2013              		.loc 1 1350 0
 2014 0004 054B     		ldr	r3, .L146
 2015 0006 9B68     		ldr	r3, [r3, #8]
 2016 0008 03F08003 		and	r3, r3, #128
 2017 000c 002B     		cmp	r3, #0
ARM GAS  /tmp/ccxUz4Br.s 			page 60


 2018 000e 04D0     		beq	.L144
1351:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1352:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* RCC Clock Security System interrupt user callback */
1353:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     HAL_RCC_CSSCallback();
 2019              		.loc 1 1353 0
 2020 0010 FFF7FEFF 		bl	HAL_RCC_CSSCallback
1354:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     
1355:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     /* Clear RCC CSS pending bit */
1356:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 2021              		.loc 1 1356 0
 2022 0014 024B     		ldr	r3, .L146+4
 2023 0016 8022     		movs	r2, #128
 2024 0018 1A70     		strb	r2, [r3]
 2025              	.L144:
1357:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   }
1358:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 2026              		.loc 1 1358 0
 2027 001a 80BD     		pop	{r7, pc}
 2028              	.L147:
 2029              		.align	2
 2030              	.L146:
 2031 001c 00100240 		.word	1073876992
 2032 0020 0A100240 		.word	1073877002
 2033              		.cfi_endproc
 2034              	.LFE75:
 2036              		.section	.text.RCC_Delay,"ax",%progbits
 2037              		.align	2
 2038              		.thumb
 2039              		.thumb_func
 2041              	RCC_Delay:
 2042              	.LFB76:
1359:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1360:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1361:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
1362:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @param  mdelay: specifies the delay time length, in milliseconds.
1363:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval None
1364:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1365:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** static void RCC_Delay(uint32_t mdelay)
1366:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 2043              		.loc 1 1366 0
 2044              		.cfi_startproc
 2045              		@ args = 0, pretend = 0, frame = 16
 2046              		@ frame_needed = 1, uses_anonymous_args = 0
 2047              		@ link register save eliminated.
 2048 0000 80B4     		push	{r7}
 2049              	.LCFI56:
 2050              		.cfi_def_cfa_offset 4
 2051              		.cfi_offset 7, -4
 2052 0002 85B0     		sub	sp, sp, #20
 2053              	.LCFI57:
 2054              		.cfi_def_cfa_offset 24
 2055 0004 00AF     		add	r7, sp, #0
 2056              	.LCFI58:
 2057              		.cfi_def_cfa_register 7
 2058 0006 7860     		str	r0, [r7, #4]
1367:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 2059              		.loc 1 1367 0
ARM GAS  /tmp/ccxUz4Br.s 			page 61


 2060 0008 0A4B     		ldr	r3, .L150
 2061 000a 1B68     		ldr	r3, [r3]
 2062 000c 0A4A     		ldr	r2, .L150+4
 2063 000e A2FB0323 		umull	r2, r3, r2, r3
 2064 0012 5B0A     		lsrs	r3, r3, #9
 2065 0014 7A68     		ldr	r2, [r7, #4]
 2066 0016 02FB03F3 		mul	r3, r2, r3
 2067 001a FB60     		str	r3, [r7, #12]
 2068              	.L149:
 2069              	.LBB7:
 2070              	.LBB8:
 2071              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS Cortex-M Core Function/Instruction Header File
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V4.30
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     20. October 2015
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:Drivers/CMSIS/Include/cmsis_gcc.h **** 
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****    All rights reserved.
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****    Redistribution and use in source and binary forms, with or without
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****    modification, are permitted provided that the following conditions are met:
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions of source code must retain the above copyright
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Redistributions in binary form must reproduce the above copyright
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****      notice, this list of conditions and the following disclaimer in the
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****      documentation and/or other materials provided with the distribution.
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****      to endorse or promote products derived from this software without
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****      specific prior written permission.
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****    *
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:Drivers/CMSIS/Include/cmsis_gcc.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:Drivers/CMSIS/Include/cmsis_gcc.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:Drivers/CMSIS/Include/cmsis_gcc.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:Drivers/CMSIS/Include/cmsis_gcc.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:Drivers/CMSIS/Include/cmsis_gcc.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:Drivers/CMSIS/Include/cmsis_gcc.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:Drivers/CMSIS/Include/cmsis_gcc.h ****    ---------------------------------------------------------------------------*/
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  36:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined ( __GNUC__ )
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  41:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  44:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccxUz4Br.s 			page 62


  46:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  47:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
  49:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
  51:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  53:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  54:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
  55:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
  57:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
  59:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  60:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  62:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
  66:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  67:Drivers/CMSIS/Include/cmsis_gcc.h ****   Can only be executed in Privileged modes.
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  72:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  73:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  74:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  75:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
  77:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
  78:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  80:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
  81:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
  83:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
  85:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  87:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  88:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  89:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
  93:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_CONTROL(uint32_t control)
  95:Drivers/CMSIS/Include/cmsis_gcc.h **** {
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
  97:Drivers/CMSIS/Include/cmsis_gcc.h **** }
  98:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  99:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 100:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 101:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 102:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
ARM GAS  /tmp/ccxUz4Br.s 			page 63


 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 105:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
 106:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 108:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 109:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 110:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 111:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 114:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_APSR(void)
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 123:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 124:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 125:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 126:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 127:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 128:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 132:Drivers/CMSIS/Include/cmsis_gcc.h ****     \return               xPSR Register value
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_xPSR(void)
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 137:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 148:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
 149:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 155:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
ARM GAS  /tmp/ccxUz4Br.s 			page 64


 160:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
 163:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 169:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 172:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 175:Drivers/CMSIS/Include/cmsis_gcc.h ****   register uint32_t result;
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 184:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 196:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 197:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 211:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccxUz4Br.s 			page 65


 217:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M >= 0x03U)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 222:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_fault_irq(void)
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 228:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 231:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 232:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 234:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 236:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_fault_irq(void)
 238:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_BASEPRI(void)
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 266:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 269:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 270:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 272:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccxUz4Br.s 			page 66


 274:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI_MAX(uint32_t value)
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (value) : "memory");
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 279:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 281:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 283:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 284:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FAULTMASK(void)
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 288:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 291:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 296:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 299:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
 300:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 301:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M >= 0x03U) */
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 306:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** #if       (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U)
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 311:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_FPSCR(void)
 315:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 317:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(0);
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 329:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccxUz4Br.s 			page 67


 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 332:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__FPU_PRESENT == 1U) && (__FPU_USED == 1U)
 338:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Empty asm statement works as a scheduling barrier */
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc");
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("");
 342:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 345:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* (__CORTEX_M == 0x04U) || (__CORTEX_M == 0x07U) */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 352:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 353:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 358:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 361:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 368:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 369:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("nop");
 2072              		.loc 2 375 0 discriminator 1
 2073              	@ 375 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2074 001c 00BF     		nop
 2075              	@ 0 "" 2
 2076              		.thumb
 2077              	.LBE8:
 2078              	.LBE7:
1368:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   do 
1369:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   {
1370:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     __NOP();
1371:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   } 
1372:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   while (Delay --);
ARM GAS  /tmp/ccxUz4Br.s 			page 68


 2079              		.loc 1 1372 0 discriminator 1
 2080 001e FB68     		ldr	r3, [r7, #12]
 2081 0020 5A1E     		subs	r2, r3, #1
 2082 0022 FA60     		str	r2, [r7, #12]
 2083 0024 002B     		cmp	r3, #0
 2084 0026 F9D1     		bne	.L149
1373:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
 2085              		.loc 1 1373 0
 2086 0028 1437     		adds	r7, r7, #20
 2087              	.LCFI59:
 2088              		.cfi_def_cfa_offset 4
 2089 002a BD46     		mov	sp, r7
 2090              	.LCFI60:
 2091              		.cfi_def_cfa_register 13
 2092              		@ sp needed
 2093 002c 5DF8047B 		ldr	r7, [sp], #4
 2094              	.LCFI61:
 2095              		.cfi_restore 7
 2096              		.cfi_def_cfa_offset 0
 2097 0030 7047     		bx	lr
 2098              	.L151:
 2099 0032 00BF     		.align	2
 2100              	.L150:
 2101 0034 00000000 		.word	SystemCoreClock
 2102 0038 D34D6210 		.word	274877907
 2103              		.cfi_endproc
 2104              	.LFE76:
 2106              		.section	.text.HAL_RCC_CSSCallback,"ax",%progbits
 2107              		.align	2
 2108              		.weak	HAL_RCC_CSSCallback
 2109              		.thumb
 2110              		.thumb_func
 2112              	HAL_RCC_CSSCallback:
 2113              	.LFB77:
1374:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** 
1375:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** /**
1376:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @brief  RCC Clock Security System interrupt callback
1377:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   * @retval none
1378:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   */
1379:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** __weak void HAL_RCC_CSSCallback(void)
1380:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** {
 2114              		.loc 1 1380 0
 2115              		.cfi_startproc
 2116              		@ args = 0, pretend = 0, frame = 0
 2117              		@ frame_needed = 1, uses_anonymous_args = 0
 2118              		@ link register save eliminated.
 2119 0000 80B4     		push	{r7}
 2120              	.LCFI62:
 2121              		.cfi_def_cfa_offset 4
 2122              		.cfi_offset 7, -4
 2123 0002 00AF     		add	r7, sp, #0
 2124              	.LCFI63:
 2125              		.cfi_def_cfa_register 7
1381:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
1382:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     the HAL_RCC_CSSCallback could be implemented in the user file
1383:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c ****     */ 
1384:Drivers/STM32F1xx_HAL_Driver/Src/stm32f1xx_hal_rcc.c **** }
ARM GAS  /tmp/ccxUz4Br.s 			page 69


 2126              		.loc 1 1384 0
 2127 0004 BD46     		mov	sp, r7
 2128              	.LCFI64:
 2129              		.cfi_def_cfa_register 13
 2130              		@ sp needed
 2131 0006 5DF8047B 		ldr	r7, [sp], #4
 2132              	.LCFI65:
 2133              		.cfi_restore 7
 2134              		.cfi_def_cfa_offset 0
 2135 000a 7047     		bx	lr
 2136              		.cfi_endproc
 2137              	.LFE77:
 2139              		.text
 2140              	.Letext0:
 2141              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 2142              		.file 4 "/usr/include/newlib/sys/_stdint.h"
 2143              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 2144              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 2145              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 2146              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 2147              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 2148              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 2149              		.file 11 "Drivers/CMSIS/Include/core_cm3.h"
 2150              		.file 12 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
ARM GAS  /tmp/ccxUz4Br.s 			page 70


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_hal_rcc.c
     /tmp/ccxUz4Br.s:19     .text.HAL_RCC_DeInit:0000000000000000 $t
     /tmp/ccxUz4Br.s:24     .text.HAL_RCC_DeInit:0000000000000000 HAL_RCC_DeInit
     /tmp/ccxUz4Br.s:214    .text.HAL_RCC_DeInit:0000000000000120 $d
     /tmp/ccxUz4Br.s:221    .text.HAL_RCC_OscConfig:0000000000000000 $t
     /tmp/ccxUz4Br.s:226    .text.HAL_RCC_OscConfig:0000000000000000 HAL_RCC_OscConfig
     /tmp/ccxUz4Br.s:2041   .text.RCC_Delay:0000000000000000 RCC_Delay
     /tmp/ccxUz4Br.s:596    .text.HAL_RCC_OscConfig:0000000000000260 $d
     /tmp/ccxUz4Br.s:601    .text.HAL_RCC_OscConfig:000000000000026c $t
     /tmp/ccxUz4Br.s:953    .text.HAL_RCC_OscConfig:00000000000004b8 $d
     /tmp/ccxUz4Br.s:960    .text.HAL_RCC_ClockConfig:0000000000000000 $t
     /tmp/ccxUz4Br.s:965    .text.HAL_RCC_ClockConfig:0000000000000000 HAL_RCC_ClockConfig
     /tmp/ccxUz4Br.s:1468   .text.HAL_RCC_GetSysClockFreq:0000000000000000 HAL_RCC_GetSysClockFreq
     /tmp/ccxUz4Br.s:1255   .text.HAL_RCC_ClockConfig:00000000000001dc $d
     /tmp/ccxUz4Br.s:1263   .text.HAL_RCC_MCOConfig:0000000000000000 $t
     /tmp/ccxUz4Br.s:1268   .text.HAL_RCC_MCOConfig:0000000000000000 HAL_RCC_MCOConfig
     /tmp/ccxUz4Br.s:1352   .text.HAL_RCC_MCOConfig:0000000000000074 $d
     /tmp/ccxUz4Br.s:1358   .text.HAL_RCC_EnableCSS:0000000000000000 $t
     /tmp/ccxUz4Br.s:1363   .text.HAL_RCC_EnableCSS:0000000000000000 HAL_RCC_EnableCSS
     /tmp/ccxUz4Br.s:1394   .text.HAL_RCC_EnableCSS:0000000000000014 $d
     /tmp/ccxUz4Br.s:1399   .text.HAL_RCC_DisableCSS:0000000000000000 $t
     /tmp/ccxUz4Br.s:1404   .text.HAL_RCC_DisableCSS:0000000000000000 HAL_RCC_DisableCSS
     /tmp/ccxUz4Br.s:1435   .text.HAL_RCC_DisableCSS:0000000000000014 $d
     /tmp/ccxUz4Br.s:1440   .rodata:0000000000000000 $d
     /tmp/ccxUz4Br.s:1463   .text.HAL_RCC_GetSysClockFreq:0000000000000000 $t
     /tmp/ccxUz4Br.s:1599   .text.HAL_RCC_GetSysClockFreq:00000000000000b4 $d
     /tmp/ccxUz4Br.s:1608   .text.HAL_RCC_GetHCLKFreq:0000000000000000 $t
     /tmp/ccxUz4Br.s:1613   .text.HAL_RCC_GetHCLKFreq:0000000000000000 HAL_RCC_GetHCLKFreq
     /tmp/ccxUz4Br.s:1644   .text.HAL_RCC_GetHCLKFreq:0000000000000014 $d
     /tmp/ccxUz4Br.s:1649   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 $t
     /tmp/ccxUz4Br.s:1654   .text.HAL_RCC_GetPCLK1Freq:0000000000000000 HAL_RCC_GetPCLK1Freq
     /tmp/ccxUz4Br.s:1684   .text.HAL_RCC_GetPCLK1Freq:0000000000000020 $d
     /tmp/ccxUz4Br.s:1690   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 $t
     /tmp/ccxUz4Br.s:1695   .text.HAL_RCC_GetPCLK2Freq:0000000000000000 HAL_RCC_GetPCLK2Freq
     /tmp/ccxUz4Br.s:1725   .text.HAL_RCC_GetPCLK2Freq:0000000000000020 $d
     /tmp/ccxUz4Br.s:1731   .text.HAL_RCC_GetOscConfig:0000000000000000 $t
     /tmp/ccxUz4Br.s:1736   .text.HAL_RCC_GetOscConfig:0000000000000000 HAL_RCC_GetOscConfig
     /tmp/ccxUz4Br.s:1908   .text.HAL_RCC_GetOscConfig:00000000000000f8 $d
     /tmp/ccxUz4Br.s:1913   .text.HAL_RCC_GetClockConfig:0000000000000000 $t
     /tmp/ccxUz4Br.s:1918   .text.HAL_RCC_GetClockConfig:0000000000000000 HAL_RCC_GetClockConfig
     /tmp/ccxUz4Br.s:1988   .text.HAL_RCC_GetClockConfig:0000000000000058 $d
     /tmp/ccxUz4Br.s:1994   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 $t
     /tmp/ccxUz4Br.s:1999   .text.HAL_RCC_NMI_IRQHandler:0000000000000000 HAL_RCC_NMI_IRQHandler
     /tmp/ccxUz4Br.s:2112   .text.HAL_RCC_CSSCallback:0000000000000000 HAL_RCC_CSSCallback
     /tmp/ccxUz4Br.s:2031   .text.HAL_RCC_NMI_IRQHandler:000000000000001c $d
     /tmp/ccxUz4Br.s:2037   .text.RCC_Delay:0000000000000000 $t
     /tmp/ccxUz4Br.s:2101   .text.RCC_Delay:0000000000000034 $d
     /tmp/ccxUz4Br.s:2107   .text.HAL_RCC_CSSCallback:0000000000000000 $t
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_InitTick
SystemCoreClock
AHBPrescTable
HAL_GPIO_Init
ARM GAS  /tmp/ccxUz4Br.s 			page 71


APBPrescTable
