ARM GAS  /tmp/ccfjIG32.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f1xx_it.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.NMI_Handler,"ax",%progbits
  19              		.align	2
  20              		.global	NMI_Handler
  21              		.thumb
  22              		.thumb_func
  24              	NMI_Handler:
  25              	.LFB63:
  26              		.file 1 "Src/stm32f1xx_it.c"
   1:Src/stm32f1xx_it.c **** /**
   2:Src/stm32f1xx_it.c ****   ******************************************************************************
   3:Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   4:Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   5:Src/stm32f1xx_it.c ****   ******************************************************************************
   6:Src/stm32f1xx_it.c ****   *
   7:Src/stm32f1xx_it.c ****   * COPYRIGHT(c) 2018 STMicroelectronics
   8:Src/stm32f1xx_it.c ****   *
   9:Src/stm32f1xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:Src/stm32f1xx_it.c ****   * are permitted provided that the following conditions are met:
  11:Src/stm32f1xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:Src/stm32f1xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:Src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:Src/stm32f1xx_it.c ****   *      and/or other materials provided with the distribution.
  16:Src/stm32f1xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:Src/stm32f1xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:Src/stm32f1xx_it.c ****   *      without specific prior written permission.
  19:Src/stm32f1xx_it.c ****   *
  20:Src/stm32f1xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:Src/stm32f1xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:Src/stm32f1xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:Src/stm32f1xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:Src/stm32f1xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:Src/stm32f1xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:Src/stm32f1xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:Src/stm32f1xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:Src/stm32f1xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:Src/stm32f1xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:Src/stm32f1xx_it.c ****   *
  31:Src/stm32f1xx_it.c ****   ******************************************************************************
  32:Src/stm32f1xx_it.c ****   */
ARM GAS  /tmp/ccfjIG32.s 			page 2


  33:Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  34:Src/stm32f1xx_it.c **** #include "stm32f1xx_hal.h"
  35:Src/stm32f1xx_it.c **** #include "stm32f1xx.h"
  36:Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  37:Src/stm32f1xx_it.c **** 
  38:Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  39:Src/stm32f1xx_it.c **** 
  40:Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  41:Src/stm32f1xx_it.c **** 
  42:Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  43:Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart1;
  44:Src/stm32f1xx_it.c **** extern volatile uint32_t ticks_delay;
  45:Src/stm32f1xx_it.c **** /******************************************************************************/
  46:Src/stm32f1xx_it.c **** /*            Cortex-M3 Processor Interruption and Exception Handlers         */ 
  47:Src/stm32f1xx_it.c **** /******************************************************************************/
  48:Src/stm32f1xx_it.c **** 
  49:Src/stm32f1xx_it.c **** /**
  50:Src/stm32f1xx_it.c **** * @brief This function handles Non maskable interrupt.
  51:Src/stm32f1xx_it.c **** */
  52:Src/stm32f1xx_it.c **** void NMI_Handler(void)
  53:Src/stm32f1xx_it.c **** {
  27              		.loc 1 53 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 7, -4
  36 0002 00AF     		add	r7, sp, #0
  37              	.LCFI1:
  38              		.cfi_def_cfa_register 7
  54:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  55:Src/stm32f1xx_it.c **** 
  56:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  57:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  58:Src/stm32f1xx_it.c **** 
  59:Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  60:Src/stm32f1xx_it.c **** }
  39              		.loc 1 60 0
  40 0004 BD46     		mov	sp, r7
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 13
  43              		@ sp needed
  44 0006 5DF8047B 		ldr	r7, [sp], #4
  45              	.LCFI3:
  46              		.cfi_restore 7
  47              		.cfi_def_cfa_offset 0
  48 000a 7047     		bx	lr
  49              		.cfi_endproc
  50              	.LFE63:
  52              		.section	.text.HardFault_Handler,"ax",%progbits
  53              		.align	2
  54              		.global	HardFault_Handler
  55              		.thumb
  56              		.thumb_func
ARM GAS  /tmp/ccfjIG32.s 			page 3


  58              	HardFault_Handler:
  59              	.LFB64:
  61:Src/stm32f1xx_it.c **** 
  62:Src/stm32f1xx_it.c **** /**
  63:Src/stm32f1xx_it.c **** * @brief This function handles Hard fault interrupt.
  64:Src/stm32f1xx_it.c **** */
  65:Src/stm32f1xx_it.c **** void HardFault_Handler(void)
  66:Src/stm32f1xx_it.c **** {
  60              		.loc 1 66 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 0
  63              		@ frame_needed = 1, uses_anonymous_args = 0
  64              		@ link register save eliminated.
  65 0000 80B4     		push	{r7}
  66              	.LCFI4:
  67              		.cfi_def_cfa_offset 4
  68              		.cfi_offset 7, -4
  69 0002 00AF     		add	r7, sp, #0
  70              	.LCFI5:
  71              		.cfi_def_cfa_register 7
  72              	.L3:
  67:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  68:Src/stm32f1xx_it.c **** 
  69:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  70:Src/stm32f1xx_it.c ****   while (1)
  71:Src/stm32f1xx_it.c ****   {
  72:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
  73:Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
  74:Src/stm32f1xx_it.c ****   }
  73              		.loc 1 74 0 discriminator 1
  74 0004 FEE7     		b	.L3
  75              		.cfi_endproc
  76              	.LFE64:
  78 0006 00BF     		.section	.text.MemManage_Handler,"ax",%progbits
  79              		.align	2
  80              		.global	MemManage_Handler
  81              		.thumb
  82              		.thumb_func
  84              	MemManage_Handler:
  85              	.LFB65:
  75:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  76:Src/stm32f1xx_it.c **** 
  77:Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  78:Src/stm32f1xx_it.c **** }
  79:Src/stm32f1xx_it.c **** 
  80:Src/stm32f1xx_it.c **** /**
  81:Src/stm32f1xx_it.c **** * @brief This function handles Memory management fault.
  82:Src/stm32f1xx_it.c **** */
  83:Src/stm32f1xx_it.c **** void MemManage_Handler(void)
  84:Src/stm32f1xx_it.c **** {
  86              		.loc 1 84 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 1, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  91 0000 80B4     		push	{r7}
  92              	.LCFI6:
ARM GAS  /tmp/ccfjIG32.s 			page 4


  93              		.cfi_def_cfa_offset 4
  94              		.cfi_offset 7, -4
  95 0002 00AF     		add	r7, sp, #0
  96              	.LCFI7:
  97              		.cfi_def_cfa_register 7
  98              	.L5:
  85:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  86:Src/stm32f1xx_it.c **** 
  87:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
  88:Src/stm32f1xx_it.c ****   while (1)
  89:Src/stm32f1xx_it.c ****   {
  90:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
  91:Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
  92:Src/stm32f1xx_it.c ****   }
  99              		.loc 1 92 0 discriminator 1
 100 0004 FEE7     		b	.L5
 101              		.cfi_endproc
 102              	.LFE65:
 104 0006 00BF     		.section	.text.BusFault_Handler,"ax",%progbits
 105              		.align	2
 106              		.global	BusFault_Handler
 107              		.thumb
 108              		.thumb_func
 110              	BusFault_Handler:
 111              	.LFB66:
  93:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
  94:Src/stm32f1xx_it.c **** 
  95:Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
  96:Src/stm32f1xx_it.c **** }
  97:Src/stm32f1xx_it.c **** 
  98:Src/stm32f1xx_it.c **** /**
  99:Src/stm32f1xx_it.c **** * @brief This function handles Prefetch fault, memory access fault.
 100:Src/stm32f1xx_it.c **** */
 101:Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 102:Src/stm32f1xx_it.c **** {
 112              		.loc 1 102 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 1, uses_anonymous_args = 0
 116              		@ link register save eliminated.
 117 0000 80B4     		push	{r7}
 118              	.LCFI8:
 119              		.cfi_def_cfa_offset 4
 120              		.cfi_offset 7, -4
 121 0002 00AF     		add	r7, sp, #0
 122              	.LCFI9:
 123              		.cfi_def_cfa_register 7
 124              	.L7:
 103:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 104:Src/stm32f1xx_it.c **** 
 105:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 106:Src/stm32f1xx_it.c ****   while (1)
 107:Src/stm32f1xx_it.c ****   {
 108:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 109:Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 110:Src/stm32f1xx_it.c ****   }
 125              		.loc 1 110 0 discriminator 1
ARM GAS  /tmp/ccfjIG32.s 			page 5


 126 0004 FEE7     		b	.L7
 127              		.cfi_endproc
 128              	.LFE66:
 130 0006 00BF     		.section	.text.UsageFault_Handler,"ax",%progbits
 131              		.align	2
 132              		.global	UsageFault_Handler
 133              		.thumb
 134              		.thumb_func
 136              	UsageFault_Handler:
 137              	.LFB67:
 111:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 112:Src/stm32f1xx_it.c **** 
 113:Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 114:Src/stm32f1xx_it.c **** }
 115:Src/stm32f1xx_it.c **** 
 116:Src/stm32f1xx_it.c **** /**
 117:Src/stm32f1xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 118:Src/stm32f1xx_it.c **** */
 119:Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 120:Src/stm32f1xx_it.c **** {
 138              		.loc 1 120 0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 1, uses_anonymous_args = 0
 142              		@ link register save eliminated.
 143 0000 80B4     		push	{r7}
 144              	.LCFI10:
 145              		.cfi_def_cfa_offset 4
 146              		.cfi_offset 7, -4
 147 0002 00AF     		add	r7, sp, #0
 148              	.LCFI11:
 149              		.cfi_def_cfa_register 7
 150              	.L9:
 121:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 122:Src/stm32f1xx_it.c **** 
 123:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 124:Src/stm32f1xx_it.c ****   while (1)
 125:Src/stm32f1xx_it.c ****   {
 126:Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 127:Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 128:Src/stm32f1xx_it.c ****   }
 151              		.loc 1 128 0 discriminator 1
 152 0004 FEE7     		b	.L9
 153              		.cfi_endproc
 154              	.LFE67:
 156 0006 00BF     		.section	.text.SVC_Handler,"ax",%progbits
 157              		.align	2
 158              		.global	SVC_Handler
 159              		.thumb
 160              		.thumb_func
 162              	SVC_Handler:
 163              	.LFB68:
 129:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 130:Src/stm32f1xx_it.c **** 
 131:Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 132:Src/stm32f1xx_it.c **** }
 133:Src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccfjIG32.s 			page 6


 134:Src/stm32f1xx_it.c **** /**
 135:Src/stm32f1xx_it.c **** * @brief This function handles System service call via SWI instruction.
 136:Src/stm32f1xx_it.c **** */
 137:Src/stm32f1xx_it.c **** void SVC_Handler(void)
 138:Src/stm32f1xx_it.c **** {
 164              		.loc 1 138 0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 1, uses_anonymous_args = 0
 168              		@ link register save eliminated.
 169 0000 80B4     		push	{r7}
 170              	.LCFI12:
 171              		.cfi_def_cfa_offset 4
 172              		.cfi_offset 7, -4
 173 0002 00AF     		add	r7, sp, #0
 174              	.LCFI13:
 175              		.cfi_def_cfa_register 7
 139:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 140:Src/stm32f1xx_it.c **** 
 141:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 142:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 143:Src/stm32f1xx_it.c **** 
 144:Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 145:Src/stm32f1xx_it.c **** }
 176              		.loc 1 145 0
 177 0004 BD46     		mov	sp, r7
 178              	.LCFI14:
 179              		.cfi_def_cfa_register 13
 180              		@ sp needed
 181 0006 5DF8047B 		ldr	r7, [sp], #4
 182              	.LCFI15:
 183              		.cfi_restore 7
 184              		.cfi_def_cfa_offset 0
 185 000a 7047     		bx	lr
 186              		.cfi_endproc
 187              	.LFE68:
 189              		.section	.text.DebugMon_Handler,"ax",%progbits
 190              		.align	2
 191              		.global	DebugMon_Handler
 192              		.thumb
 193              		.thumb_func
 195              	DebugMon_Handler:
 196              	.LFB69:
 146:Src/stm32f1xx_it.c **** 
 147:Src/stm32f1xx_it.c **** /**
 148:Src/stm32f1xx_it.c **** * @brief This function handles Debug monitor.
 149:Src/stm32f1xx_it.c **** */
 150:Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 151:Src/stm32f1xx_it.c **** {
 197              		.loc 1 151 0
 198              		.cfi_startproc
 199              		@ args = 0, pretend = 0, frame = 0
 200              		@ frame_needed = 1, uses_anonymous_args = 0
 201              		@ link register save eliminated.
 202 0000 80B4     		push	{r7}
 203              	.LCFI16:
 204              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccfjIG32.s 			page 7


 205              		.cfi_offset 7, -4
 206 0002 00AF     		add	r7, sp, #0
 207              	.LCFI17:
 208              		.cfi_def_cfa_register 7
 152:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 153:Src/stm32f1xx_it.c **** 
 154:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 155:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 156:Src/stm32f1xx_it.c **** 
 157:Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 158:Src/stm32f1xx_it.c **** }
 209              		.loc 1 158 0
 210 0004 BD46     		mov	sp, r7
 211              	.LCFI18:
 212              		.cfi_def_cfa_register 13
 213              		@ sp needed
 214 0006 5DF8047B 		ldr	r7, [sp], #4
 215              	.LCFI19:
 216              		.cfi_restore 7
 217              		.cfi_def_cfa_offset 0
 218 000a 7047     		bx	lr
 219              		.cfi_endproc
 220              	.LFE69:
 222              		.section	.text.PendSV_Handler,"ax",%progbits
 223              		.align	2
 224              		.global	PendSV_Handler
 225              		.thumb
 226              		.thumb_func
 228              	PendSV_Handler:
 229              	.LFB70:
 159:Src/stm32f1xx_it.c **** 
 160:Src/stm32f1xx_it.c **** /**
 161:Src/stm32f1xx_it.c **** * @brief This function handles Pendable request for system service.
 162:Src/stm32f1xx_it.c **** */
 163:Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 164:Src/stm32f1xx_it.c **** {
 230              		.loc 1 164 0
 231              		.cfi_startproc
 232              		@ args = 0, pretend = 0, frame = 0
 233              		@ frame_needed = 1, uses_anonymous_args = 0
 234              		@ link register save eliminated.
 235 0000 80B4     		push	{r7}
 236              	.LCFI20:
 237              		.cfi_def_cfa_offset 4
 238              		.cfi_offset 7, -4
 239 0002 00AF     		add	r7, sp, #0
 240              	.LCFI21:
 241              		.cfi_def_cfa_register 7
 165:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 166:Src/stm32f1xx_it.c **** 
 167:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 168:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 169:Src/stm32f1xx_it.c **** 
 170:Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 171:Src/stm32f1xx_it.c **** }
 242              		.loc 1 171 0
 243 0004 BD46     		mov	sp, r7
ARM GAS  /tmp/ccfjIG32.s 			page 8


 244              	.LCFI22:
 245              		.cfi_def_cfa_register 13
 246              		@ sp needed
 247 0006 5DF8047B 		ldr	r7, [sp], #4
 248              	.LCFI23:
 249              		.cfi_restore 7
 250              		.cfi_def_cfa_offset 0
 251 000a 7047     		bx	lr
 252              		.cfi_endproc
 253              	.LFE70:
 255              		.section	.text.SysTick_Handler,"ax",%progbits
 256              		.align	2
 257              		.global	SysTick_Handler
 258              		.thumb
 259              		.thumb_func
 261              	SysTick_Handler:
 262              	.LFB71:
 172:Src/stm32f1xx_it.c **** 
 173:Src/stm32f1xx_it.c **** /**
 174:Src/stm32f1xx_it.c **** * @brief This function handles System tick timer.
 175:Src/stm32f1xx_it.c **** */
 176:Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 177:Src/stm32f1xx_it.c **** {
 263              		.loc 1 177 0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 1, uses_anonymous_args = 0
 267 0000 80B5     		push	{r7, lr}
 268              	.LCFI24:
 269              		.cfi_def_cfa_offset 8
 270              		.cfi_offset 7, -8
 271              		.cfi_offset 14, -4
 272 0002 00AF     		add	r7, sp, #0
 273              	.LCFI25:
 274              		.cfi_def_cfa_register 7
 178:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 179:Src/stm32f1xx_it.c **** 
 180:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 181:Src/stm32f1xx_it.c ****   HAL_IncTick();
 275              		.loc 1 181 0
 276 0004 FFF7FEFF 		bl	HAL_IncTick
 182:Src/stm32f1xx_it.c ****   HAL_SYSTICK_IRQHandler();
 277              		.loc 1 182 0
 278 0008 FFF7FEFF 		bl	HAL_SYSTICK_IRQHandler
 183:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 184:Src/stm32f1xx_it.c ****   ticks_delay++;
 279              		.loc 1 184 0
 280 000c 024B     		ldr	r3, .L14
 281 000e 1B68     		ldr	r3, [r3]
 282 0010 0133     		adds	r3, r3, #1
 283 0012 014A     		ldr	r2, .L14
 284 0014 1360     		str	r3, [r2]
 185:Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 186:Src/stm32f1xx_it.c **** }
 285              		.loc 1 186 0
 286 0016 80BD     		pop	{r7, pc}
 287              	.L15:
ARM GAS  /tmp/ccfjIG32.s 			page 9


 288              		.align	2
 289              	.L14:
 290 0018 00000000 		.word	ticks_delay
 291              		.cfi_endproc
 292              	.LFE71:
 294              		.section	.text.USART1_IRQHandler,"ax",%progbits
 295              		.align	2
 296              		.global	USART1_IRQHandler
 297              		.thumb
 298              		.thumb_func
 300              	USART1_IRQHandler:
 301              	.LFB72:
 187:Src/stm32f1xx_it.c **** 
 188:Src/stm32f1xx_it.c **** 
 189:Src/stm32f1xx_it.c **** 
 190:Src/stm32f1xx_it.c **** /******************************************************************************/
 191:Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 192:Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 193:Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 194:Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 195:Src/stm32f1xx_it.c **** /******************************************************************************/
 196:Src/stm32f1xx_it.c **** 
 197:Src/stm32f1xx_it.c **** /**
 198:Src/stm32f1xx_it.c **** * @brief This function handles USART1 global interrupt.
 199:Src/stm32f1xx_it.c **** */
 200:Src/stm32f1xx_it.c **** void USART1_IRQHandler(void)
 201:Src/stm32f1xx_it.c **** {
 302              		.loc 1 201 0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 0
 305              		@ frame_needed = 1, uses_anonymous_args = 0
 306 0000 80B5     		push	{r7, lr}
 307              	.LCFI26:
 308              		.cfi_def_cfa_offset 8
 309              		.cfi_offset 7, -8
 310              		.cfi_offset 14, -4
 311 0002 00AF     		add	r7, sp, #0
 312              	.LCFI27:
 313              		.cfi_def_cfa_register 7
 202:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 0 */
 203:Src/stm32f1xx_it.c **** 
 204:Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 0 */
 205:Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart1);
 314              		.loc 1 205 0
 315 0004 0148     		ldr	r0, .L17
 316 0006 FFF7FEFF 		bl	HAL_UART_IRQHandler
 206:Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART1_IRQn 1 */
 207:Src/stm32f1xx_it.c **** 
 208:Src/stm32f1xx_it.c ****   /* USER CODE END USART1_IRQn 1 */
 209:Src/stm32f1xx_it.c **** }
 317              		.loc 1 209 0
 318 000a 80BD     		pop	{r7, pc}
 319              	.L18:
 320              		.align	2
 321              	.L17:
 322 000c 00000000 		.word	huart1
 323              		.cfi_endproc
ARM GAS  /tmp/ccfjIG32.s 			page 10


 324              	.LFE72:
 326              		.text
 327              	.Letext0:
 328              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 329              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 330              		.file 4 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 331              		.file 5 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 332              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 333              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 334              		.file 8 "Drivers/CMSIS/Include/core_cm3.h"
ARM GAS  /tmp/ccfjIG32.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/ccfjIG32.s:19     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccfjIG32.s:24     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccfjIG32.s:53     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccfjIG32.s:58     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccfjIG32.s:79     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccfjIG32.s:84     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccfjIG32.s:105    .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccfjIG32.s:110    .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccfjIG32.s:131    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccfjIG32.s:136    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccfjIG32.s:157    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccfjIG32.s:162    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccfjIG32.s:190    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccfjIG32.s:195    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccfjIG32.s:223    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccfjIG32.s:228    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccfjIG32.s:256    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccfjIG32.s:261    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccfjIG32.s:290    .text.SysTick_Handler:0000000000000018 $d
     /tmp/ccfjIG32.s:295    .text.USART1_IRQHandler:0000000000000000 $t
     /tmp/ccfjIG32.s:300    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
     /tmp/ccfjIG32.s:322    .text.USART1_IRQHandler:000000000000000c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_SYSTICK_IRQHandler
ticks_delay
HAL_UART_IRQHandler
huart1
